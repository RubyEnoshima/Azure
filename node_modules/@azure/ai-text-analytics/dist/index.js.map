{"version":3,"file":"index.js","sources":["../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/generated/generatedClientContext.ts","../src/generated/generatedClient.ts","../src/logger.ts","../src/tracing.ts","../src/util.ts","../src/textAnalyticsResult.ts","../src/detectLanguageResult.ts","../src/detectLanguageResultArray.ts","../src/recognizeCategorizedEntitiesResult.ts","../src/recognizeCategorizedEntitiesResultArray.ts","../src/analyzeSentimentResult.ts","../src/analyzeSentimentResultArray.ts","../src/extractKeyPhrasesResult.ts","../src/extractKeyPhrasesResultArray.ts","../src/recognizePiiEntitiesResult.ts","../src/recognizePiiEntitiesResultArray.ts","../src/recognizeLinkedEntitiesResult.ts","../src/recognizeLinkedEntitiesResultArray.ts","../src/azureKeyCredentialPolicy.ts","../src/analyzeHealthcareEntitiesResult.ts","../src/healthLro.ts","../src/multiCategoryClassifyResult.ts","../src/multiCategoryClassifyResultArray.ts","../src/singleCategoryClassifyResult.ts","../src/singleCategoryClassifyResultArray.ts","../src/extractSummaryResult.ts","../src/extractSummaryResultArray.ts","../src/recognizeCustomEntitiesResult.ts","../src/recognizeCustomEntitiesResultArray.ts","../src/analyzeActionsResult.ts","../src/analyzeLro.ts","../src/textAnalyticsClient.ts","../src/generated/models/index.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const JobDescriptor: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobDescriptor\",\n    modelProperties: {\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalysisInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalysisInput\",\n    modelProperties: {\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageBatchInput\"\n        }\n      }\n    }\n  }\n};\n\nexport const MultiLanguageBatchInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MultiLanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextDocumentInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentInput\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobManifest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobManifest\",\n    modelProperties: {\n      tasks: {\n        serializedName: \"tasks\",\n        type: {\n          name: \"Composite\",\n          className: \"JobManifestTasks\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobManifestTasks: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobManifestTasks\",\n    modelProperties: {\n      entityRecognitionTasks: {\n        serializedName: \"entityRecognitionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntitiesTask\"\n            }\n          }\n        }\n      },\n      entityRecognitionPiiTasks: {\n        serializedName: \"entityRecognitionPiiTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PiiTask\"\n            }\n          }\n        }\n      },\n      keyPhraseExtractionTasks: {\n        serializedName: \"keyPhraseExtractionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyPhrasesTask\"\n            }\n          }\n        }\n      },\n      entityLinkingTasks: {\n        serializedName: \"entityLinkingTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntityLinkingTask\"\n            }\n          }\n        }\n      },\n      sentimentAnalysisTasks: {\n        serializedName: \"sentimentAnalysisTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentimentAnalysisTask\"\n            }\n          }\n        }\n      },\n      extractiveSummarizationTasks: {\n        serializedName: \"extractiveSummarizationTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractiveSummarizationTask\"\n            }\n          }\n        }\n      },\n      customEntityRecognitionTasks: {\n        serializedName: \"customEntityRecognitionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CustomEntitiesTask\"\n            }\n          }\n        }\n      },\n      customSingleClassificationTasks: {\n        serializedName: \"customSingleClassificationTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CustomSingleClassificationTask\"\n            }\n          }\n        }\n      },\n      customMultiClassificationTasks: {\n        serializedName: \"customMultiClassificationTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CustomMultiClassificationTask\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"EntitiesTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesTaskParameters\",\n    modelProperties: {\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      stringIndexType: {\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiTaskParameters\",\n    modelProperties: {\n      domain: {\n        defaultValue: \"none\",\n        serializedName: \"domain\",\n        type: {\n          name: \"String\"\n        }\n      },\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: true,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      piiCategories: {\n        constraints: {\n          UniqueItems: true\n        },\n        serializedName: \"piiCategories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stringIndexType: {\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhrasesTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhrasesTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhrasesTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhrasesTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhrasesTaskParameters\",\n    modelProperties: {\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityLinkingTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingTaskParameters\",\n    modelProperties: {\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      stringIndexType: {\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentAnalysisTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentAnalysisTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentAnalysisTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentAnalysisTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentAnalysisTaskParameters\",\n    modelProperties: {\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      opinionMining: {\n        defaultValue: false,\n        serializedName: \"opinionMining\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      stringIndexType: {\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"ExtractiveSummarizationTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationTaskParameters\",\n    modelProperties: {\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"model-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      stringIndexType: {\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sentenceCount: {\n        defaultValue: 3,\n        serializedName: \"sentenceCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sortBy: {\n        defaultValue: \"Offset\",\n        serializedName: \"sortBy\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntitiesTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntitiesTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomEntitiesTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntitiesTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntitiesTaskParameters\",\n    modelProperties: {\n      projectName: {\n        serializedName: \"project-name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deployment-name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      stringIndexType: {\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomSingleClassificationTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomSingleClassificationTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomSingleClassificationTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomSingleClassificationTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomSingleClassificationTaskParameters\",\n    modelProperties: {\n      projectName: {\n        serializedName: \"project-name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deployment-name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomMultiClassificationTask: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomMultiClassificationTask\",\n    modelProperties: {\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomMultiClassificationTaskParameters\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomMultiClassificationTaskParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomMultiClassificationTaskParameters\",\n    modelProperties: {\n      projectName: {\n        serializedName: \"project-name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deployment-name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      loggingOptOut: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"TextAnalyticsError\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextAnalyticsError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextAnalyticsError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const InnerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InnerError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobMetadata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobMetadata\",\n    modelProperties: {\n      createdDateTime: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      expirationDateTime: {\n        serializedName: \"expirationDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      jobId: {\n        serializedName: \"jobId\",\n        required: true,\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      lastUpdateDateTime: {\n        serializedName: \"lastUpdateDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notStarted\",\n            \"running\",\n            \"succeeded\",\n            \"failed\",\n            \"rejected\",\n            \"cancelled\",\n            \"cancelling\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeJobDisplayName: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeJobDisplayName\",\n    modelProperties: {\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TasksState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksState\",\n    modelProperties: {\n      tasks: {\n        serializedName: \"tasks\",\n        type: {\n          name: \"Composite\",\n          className: \"TasksStateTasks\"\n        }\n      }\n    }\n  }\n};\n\nexport const TasksStateTasks: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasks\",\n    modelProperties: {\n      completed: {\n        serializedName: \"completed\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      failed: {\n        serializedName: \"failed\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      inProgress: {\n        serializedName: \"inProgress\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      entityRecognitionTasks: {\n        serializedName: \"entityRecognitionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksEntityRecognitionTasksItem\"\n            }\n          }\n        }\n      },\n      entityRecognitionPiiTasks: {\n        serializedName: \"entityRecognitionPiiTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksEntityRecognitionPiiTasksItem\"\n            }\n          }\n        }\n      },\n      keyPhraseExtractionTasks: {\n        serializedName: \"keyPhraseExtractionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksKeyPhraseExtractionTasksItem\"\n            }\n          }\n        }\n      },\n      entityLinkingTasks: {\n        serializedName: \"entityLinkingTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksEntityLinkingTasksItem\"\n            }\n          }\n        }\n      },\n      sentimentAnalysisTasks: {\n        serializedName: \"sentimentAnalysisTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksSentimentAnalysisTasksItem\"\n            }\n          }\n        }\n      },\n      extractiveSummarizationTasks: {\n        serializedName: \"extractiveSummarizationTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksExtractiveSummarizationTasksItem\"\n            }\n          }\n        }\n      },\n      customEntityRecognitionTasks: {\n        serializedName: \"customEntityRecognitionTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksCustomEntityRecognitionTasksItem\"\n            }\n          }\n        }\n      },\n      customSingleClassificationTasks: {\n        serializedName: \"customSingleClassificationTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksCustomSingleClassificationTasksItem\"\n            }\n          }\n        }\n      },\n      customMultiClassificationTasks: {\n        serializedName: \"customMultiClassificationTasks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TasksStateTasksCustomMultiClassificationTasksItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TaskState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskState\",\n    modelProperties: {\n      lastUpdateDateTime: {\n        serializedName: \"lastUpdateDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notStarted\",\n            \"running\",\n            \"succeeded\",\n            \"failed\",\n            \"rejected\",\n            \"cancelled\",\n            \"cancelling\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"EntitiesResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentEntities: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Entity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const Entity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Entity\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        serializedName: \"category\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      subCategory: {\n        serializedName: \"subcategory\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextAnalyticsWarning: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextAnalyticsWarning\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentStatistics: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentStatistics\",\n    modelProperties: {\n      characterCount: {\n        serializedName: \"charactersCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        serializedName: \"transactionsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentError\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"TextAnalyticsError\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentBatchStatistics: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentBatchStatistics\",\n    modelProperties: {\n      documentCount: {\n        serializedName: \"documentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      validDocumentCount: {\n        serializedName: \"validDocumentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      erroneousDocumentCount: {\n        serializedName: \"erroneousDocumentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        serializedName: \"transactionsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PiiDocumentEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiDocumentEntities: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiDocumentEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      redactedText: {\n        serializedName: \"redactedText\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Entity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhraseResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentKeyPhrases\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentKeyPhrases: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentKeyPhrases\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      keyPhrases: {\n        serializedName: \"keyPhrases\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityLinkingResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLinkedEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLinkedEntities: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLinkedEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LinkedEntity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const LinkedEntity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LinkedEntity\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      matches: {\n        serializedName: \"matches\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Match\"\n            }\n          }\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSourceEntityId: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSource: {\n        serializedName: \"dataSource\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bingEntitySearchApiId: {\n        serializedName: \"bingId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Match: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Match\",\n    modelProperties: {\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentResponse\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentResponse\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSentiment\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentSentiment: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentSentiment\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"neutral\", \"negative\", \"mixed\"]\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      },\n      sentenceSentiments: {\n        serializedName: \"sentences\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceSentiment\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentConfidenceScores: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentConfidenceScores\",\n    modelProperties: {\n      positive: {\n        serializedName: \"positive\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      neutral: {\n        serializedName: \"neutral\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      negative: {\n        serializedName: \"negative\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceSentiment: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceSentiment\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"neutral\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      targets: {\n        serializedName: \"targets\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceTarget\"\n            }\n          }\n        }\n      },\n      assessments: {\n        serializedName: \"assessments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceAssessment\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceTarget: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceTarget\",\n    modelProperties: {\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"mixed\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"TargetConfidenceScoreLabel\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      relations: {\n        serializedName: \"relations\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TargetRelation\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TargetConfidenceScoreLabel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TargetConfidenceScoreLabel\",\n    modelProperties: {\n      positive: {\n        serializedName: \"positive\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      negative: {\n        serializedName: \"negative\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const TargetRelation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TargetRelation\",\n    modelProperties: {\n      relationType: {\n        serializedName: \"relationType\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"assessment\", \"target\"]\n        }\n      },\n      ref: {\n        serializedName: \"ref\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceAssessment: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceAssessment\",\n    modelProperties: {\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"mixed\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"TargetConfidenceScoreLabel\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      isNegated: {\n        serializedName: \"isNegated\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"ExtractiveSummarizationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedDocumentSummary\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedDocumentSummary: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedDocumentSummary\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      sentences: {\n        serializedName: \"sentences\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedSummarySentence\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedSummarySentence: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedSummarySentence\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      rankScore: {\n        serializedName: \"rankScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntitiesTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntitiesTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomEntitiesResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntitiesResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntitiesResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      projectName: {\n        serializedName: \"projectName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deploymentName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomSingleClassificationTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomSingleClassificationTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomSingleClassificationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomSingleClassificationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomSingleClassificationResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SingleClassificationDocument\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      projectName: {\n        serializedName: \"projectName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deploymentName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SingleClassificationDocument: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SingleClassificationDocument\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      classification: {\n        serializedName: \"classification\",\n        type: {\n          name: \"Composite\",\n          className: \"ClassificationResult\"\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClassificationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClassificationResult\",\n    modelProperties: {\n      category: {\n        serializedName: \"category\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomMultiClassificationTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomMultiClassificationTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomMultiClassificationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomMultiClassificationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomMultiClassificationResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MultiClassificationDocument\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      projectName: {\n        serializedName: \"projectName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deploymentName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MultiClassificationDocument: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MultiClassificationDocument\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      classifications: {\n        serializedName: \"classifications\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClassificationResult\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeJobErrorsAndStatistics: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeJobErrorsAndStatistics\",\n    modelProperties: {\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const Pagination: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Pagination\",\n    modelProperties: {\n      nextLink: {\n        serializedName: \"@nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareTaskResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"HealthcareResult\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentHealthcareEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentHealthcareEntities: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentHealthcareEntities\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareEntity\"\n            }\n          }\n        }\n      },\n      relations: {\n        serializedName: \"relations\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareRelation\"\n            }\n          }\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareEntityProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareEntityProperties\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        serializedName: \"category\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      subcategory: {\n        serializedName: \"subcategory\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareLinkingProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareLinkingProperties\",\n    modelProperties: {\n      assertion: {\n        serializedName: \"assertion\",\n        type: {\n          name: \"Composite\",\n          className: \"HealthcareAssertion\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      links: {\n        serializedName: \"links\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareEntityLink\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareAssertion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareAssertion\",\n    modelProperties: {\n      conditionality: {\n        serializedName: \"conditionality\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"hypothetical\", \"conditional\"]\n        }\n      },\n      certainty: {\n        serializedName: \"certainty\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"positive\",\n            \"positivePossible\",\n            \"neutralPossible\",\n            \"negativePossible\",\n            \"negative\"\n          ]\n        }\n      },\n      association: {\n        serializedName: \"association\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"subject\", \"other\"]\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareEntityLink: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareEntityLink\",\n    modelProperties: {\n      dataSource: {\n        serializedName: \"dataSource\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareRelation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareRelation\",\n    modelProperties: {\n      relationType: {\n        serializedName: \"relationType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareRelationEntity\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareRelationEntity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareRelationEntity\",\n    modelProperties: {\n      ref: {\n        serializedName: \"ref\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      role: {\n        serializedName: \"role\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageBatchInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectLanguageInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DetectLanguageInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DetectLanguageInput\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      countryHint: {\n        serializedName: \"countryHint\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageResult\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLanguage\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLanguage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLanguage\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      detectedLanguage: {\n        serializedName: \"detectedLanguage\",\n        type: {\n          name: \"Composite\",\n          className: \"DetectedLanguage\"\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedLanguage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DetectedLanguage\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      iso6391Name: {\n        serializedName: \"iso6391Name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeBatchInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeBatchInput\",\n    modelProperties: {\n      ...JobDescriptor.type.modelProperties,\n      ...AnalysisInput.type.modelProperties,\n      ...JobManifest.type.modelProperties\n    }\n  }\n};\n\nexport const AnalyzeJobMetadata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeJobMetadata\",\n    modelProperties: {\n      ...JobMetadata.type.modelProperties,\n      ...AnalyzeJobDisplayName.type.modelProperties\n    }\n  }\n};\n\nexport const HealthcareJobState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareJobState\",\n    modelProperties: {\n      ...JobMetadata.type.modelProperties,\n      ...HealthcareTaskResult.type.modelProperties,\n      ...Pagination.type.modelProperties\n    }\n  }\n};\n\nexport const AnalyzeJobState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeJobState\",\n    modelProperties: {\n      ...AnalyzeJobMetadata.type.modelProperties,\n      ...TasksState.type.modelProperties,\n      ...AnalyzeJobErrorsAndStatistics.type.modelProperties,\n      ...Pagination.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksEntityRecognitionTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksEntityRecognitionTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...EntitiesTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksEntityRecognitionPiiTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksEntityRecognitionPiiTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...PiiTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksKeyPhraseExtractionTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksKeyPhraseExtractionTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...KeyPhraseTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksEntityLinkingTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksEntityLinkingTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...EntityLinkingTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksSentimentAnalysisTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksSentimentAnalysisTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...SentimentTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksExtractiveSummarizationTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksExtractiveSummarizationTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...ExtractiveSummarizationTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksCustomEntityRecognitionTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksCustomEntityRecognitionTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...CustomEntitiesTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksCustomSingleClassificationTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksCustomSingleClassificationTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...CustomSingleClassificationTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const TasksStateTasksCustomMultiClassificationTasksItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasksCustomMultiClassificationTasksItem\",\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...CustomMultiClassificationTaskResult.type.modelProperties\n    }\n  }\n};\n\nexport const HealthcareEntity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareEntity\",\n    modelProperties: {\n      ...HealthcareEntityProperties.type.modelProperties,\n      ...HealthcareLinkingProperties.type.modelProperties\n    }\n  }\n};\n\nexport const GeneratedClientAnalyzeHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientAnalyzeHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientCancelHealthJobHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientCancelHealthJobHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientHealthHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientHealthHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  AnalyzeBatchInput as AnalyzeBatchInputMapper,\n  MultiLanguageBatchInput as MultiLanguageBatchInputMapper,\n  LanguageBatchInput as LanguageBatchInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: [\"options\", \"body\"],\n  mapper: AnalyzeBatchInputMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json, text/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"Endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const apiVersion: OperationURLParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"v3.2-preview.2\",\n    isConstant: true,\n    serializedName: \"ApiVersion\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const jobId: OperationURLParameter = {\n  parameterPath: \"jobId\",\n  mapper: {\n    serializedName: \"jobId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const includeStatistics: OperationQueryParameter = {\n  parameterPath: [\"options\", \"includeStatistics\"],\n  mapper: {\n    serializedName: \"showStats\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"top\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 50,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const skip: OperationQueryParameter = {\n  parameterPath: [\"options\", \"skip\"],\n  mapper: {\n    defaultValue: 0,\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    serializedName: \"$skip\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const jobId1: OperationURLParameter = {\n  parameterPath: \"jobId\",\n  mapper: {\n    serializedName: \"jobId\",\n    required: true,\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const input: OperationParameter = {\n  parameterPath: \"input\",\n  mapper: MultiLanguageBatchInputMapper\n};\n\nexport const modelVersion: OperationQueryParameter = {\n  parameterPath: [\"options\", \"modelVersion\"],\n  mapper: {\n    serializedName: \"model-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const stringIndexType: OperationQueryParameter = {\n  parameterPath: [\"options\", \"stringIndexType\"],\n  mapper: {\n    serializedName: \"stringIndexType\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const loggingOptOut: OperationQueryParameter = {\n  parameterPath: [\"options\", \"loggingOptOut\"],\n  mapper: {\n    serializedName: \"loggingOptOut\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const domain: OperationQueryParameter = {\n  parameterPath: [\"options\", \"domain\"],\n  mapper: {\n    serializedName: \"domain\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const piiCategories: OperationQueryParameter = {\n  parameterPath: [\"options\", \"piiCategories\"],\n  mapper: {\n    constraints: {\n      UniqueItems: true\n    },\n    serializedName: \"piiCategories\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: \"CSV\"\n};\n\nexport const input1: OperationParameter = {\n  parameterPath: \"input\",\n  mapper: LanguageBatchInputMapper\n};\n\nexport const opinionMining: OperationQueryParameter = {\n  parameterPath: [\"options\", \"opinionMining\"],\n  mapper: {\n    serializedName: \"opinionMining\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport { GeneratedClientOptionalParams } from \"./models\";\n\n/** @internal */\nexport class GeneratedClientContext extends coreClient.ServiceClient {\n  endpoint: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the GeneratedClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: GeneratedClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-ai-text-analytics/5.2.0-beta.2`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint || \"{Endpoint}/text/analytics/{ApiVersion}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.endpoint = endpoint;\n\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"v3.2-preview.2\";\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\nimport {\n  GeneratedClientOptionalParams,\n  GeneratedClientAnalyzeOptionalParams,\n  GeneratedClientAnalyzeResponse,\n  GeneratedClientAnalyzeStatusOptionalParams,\n  GeneratedClientAnalyzeStatusResponse,\n  GeneratedClientHealthStatusOptionalParams,\n  GeneratedClientHealthStatusResponse,\n  GeneratedClientCancelHealthJobOptionalParams,\n  GeneratedClientCancelHealthJobResponse,\n  MultiLanguageBatchInput,\n  GeneratedClientHealthOptionalParams,\n  GeneratedClientHealthResponse,\n  GeneratedClientEntitiesRecognitionGeneralOptionalParams,\n  GeneratedClientEntitiesRecognitionGeneralResponse,\n  GeneratedClientEntitiesRecognitionPiiOptionalParams,\n  GeneratedClientEntitiesRecognitionPiiResponse,\n  GeneratedClientEntitiesLinkingOptionalParams,\n  GeneratedClientEntitiesLinkingResponse,\n  GeneratedClientKeyPhrasesOptionalParams,\n  GeneratedClientKeyPhrasesResponse,\n  LanguageBatchInput,\n  GeneratedClientLanguagesOptionalParams,\n  GeneratedClientLanguagesResponse,\n  GeneratedClientSentimentOptionalParams,\n  GeneratedClientSentimentResponse\n} from \"./models\";\n\n/** @internal */\nexport class GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    super(endpoint, options);\n  }\n\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.\n   * @param options The options parameters.\n   */\n  analyze(\n    options?: GeneratedClientAnalyzeOptionalParams\n  ): Promise<GeneratedClientAnalyzeResponse> {\n    return this.sendOperationRequest({ options }, analyzeOperationSpec);\n  }\n\n  /**\n   * Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are\n   * completed, the job will transition to the completed state and results will be available for each\n   * task.\n   * @param jobId Job ID for Analyze\n   * @param options The options parameters.\n   */\n  analyzeStatus(\n    jobId: string,\n    options?: GeneratedClientAnalyzeStatusOptionalParams\n  ): Promise<GeneratedClientAnalyzeStatusResponse> {\n    return this.sendOperationRequest(\n      { jobId, options },\n      analyzeStatusOperationSpec\n    );\n  }\n\n  /**\n   * Get details of the healthcare prediction job specified by the jobId.\n   * @param jobId Job ID\n   * @param options The options parameters.\n   */\n  healthStatus(\n    jobId: string,\n    options?: GeneratedClientHealthStatusOptionalParams\n  ): Promise<GeneratedClientHealthStatusResponse> {\n    return this.sendOperationRequest(\n      { jobId, options },\n      healthStatusOperationSpec\n    );\n  }\n\n  /**\n   * Cancel healthcare prediction job.\n   * @param jobId Job ID\n   * @param options The options parameters.\n   */\n  cancelHealthJob(\n    jobId: string,\n    options?: GeneratedClientCancelHealthJobOptionalParams\n  ): Promise<GeneratedClientCancelHealthJobResponse> {\n    return this.sendOperationRequest(\n      { jobId, options },\n      cancelHealthJobOperationSpec\n    );\n  }\n\n  /**\n   * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  health(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientHealthOptionalParams\n  ): Promise<GeneratedClientHealthResponse> {\n    return this.sendOperationRequest({ input, options }, healthOperationSpec);\n  }\n\n  /**\n   * The API returns a list of general named entities in a given document. For the list of supported\n   * entity types, check <a href=\"https://aka.ms/taner\">Supported Entity Types in Text Analytics API</a>.\n   * See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list\n   * of enabled languages.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  entitiesRecognitionGeneral(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientEntitiesRecognitionGeneralOptionalParams\n  ): Promise<GeneratedClientEntitiesRecognitionGeneralResponse> {\n    return this.sendOperationRequest(\n      { input, options },\n      entitiesRecognitionGeneralOperationSpec\n    );\n  }\n\n  /**\n   * The API returns a list of entities with personal information (\\\"SSN\\\", \\\"Bank Account\\\" etc) in the\n   * document. For the list of supported entity types, check <a href=\"https://aka.ms/tanerpii\">Supported\n   * Entity Types in Text Analytics API</a>. See the <a href=\"https://aka.ms/talangs\">Supported languages\n   * in Text Analytics API</a> for the list of enabled languages.\n   *\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  entitiesRecognitionPii(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientEntitiesRecognitionPiiOptionalParams\n  ): Promise<GeneratedClientEntitiesRecognitionPiiResponse> {\n    return this.sendOperationRequest(\n      { input, options },\n      entitiesRecognitionPiiOperationSpec\n    );\n  }\n\n  /**\n   * The API returns a list of recognized entities with links to a well known knowledge base. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled\n   * languages.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  entitiesLinking(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientEntitiesLinkingOptionalParams\n  ): Promise<GeneratedClientEntitiesLinkingResponse> {\n    return this.sendOperationRequest(\n      { input, options },\n      entitiesLinkingOperationSpec\n    );\n  }\n\n  /**\n   * The API returns a list of strings denoting the key phrases in the input text. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled\n   * languages.\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  keyPhrases(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientKeyPhrasesOptionalParams\n  ): Promise<GeneratedClientKeyPhrasesResponse> {\n    return this.sendOperationRequest(\n      { input, options },\n      keyPhrasesOperationSpec\n    );\n  }\n\n  /**\n   * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1\n   * indicate 100% certainty that the identified language is true. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled\n   * languages.\n   * @param input Collection of documents to analyze for language endpoint.\n   * @param options The options parameters.\n   */\n  languages(\n    input: LanguageBatchInput,\n    options?: GeneratedClientLanguagesOptionalParams\n  ): Promise<GeneratedClientLanguagesResponse> {\n    return this.sendOperationRequest(\n      { input, options },\n      languagesOperationSpec\n    );\n  }\n\n  /**\n   * The API returns a detailed sentiment analysis for the input text. The analysis is done in multiple\n   * levels of granularity, start from the a document level, down to sentence and key terms (targets and\n   * assessments).\n   * @param input Collection of documents to analyze.\n   * @param options The options parameters.\n   */\n  sentiment(\n    input: MultiLanguageBatchInput,\n    options?: GeneratedClientSentimentOptionalParams\n  ): Promise<GeneratedClientSentimentResponse> {\n    return this.sendOperationRequest(\n      { input, options },\n      sentimentOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst analyzeOperationSpec: coreClient.OperationSpec = {\n  path: \"/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst analyzeStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/analyze/jobs/{jobId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeJobState\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.top,\n    Parameters.skip\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion, Parameters.jobId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst healthStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/entities/health/jobs/{jobId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HealthcareJobState\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.top,\n    Parameters.skip\n  ],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.jobId1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst cancelHealthJobOperationSpec: coreClient.OperationSpec = {\n  path: \"/entities/health/jobs/{jobId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientCancelHealthJobHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.jobId1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst healthOperationSpec: coreClient.OperationSpec = {\n  path: \"/entities/health/jobs\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientHealthHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.modelVersion,\n    Parameters.stringIndexType,\n    Parameters.loggingOptOut\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst entitiesRecognitionGeneralOperationSpec: coreClient.OperationSpec = {\n  path: \"/entities/recognition/general\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EntitiesResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType,\n    Parameters.loggingOptOut\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst entitiesRecognitionPiiOperationSpec: coreClient.OperationSpec = {\n  path: \"/entities/recognition/pii\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PiiResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType,\n    Parameters.loggingOptOut,\n    Parameters.domain,\n    Parameters.piiCategories\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst entitiesLinkingOperationSpec: coreClient.OperationSpec = {\n  path: \"/entities/linking\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EntityLinkingResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType,\n    Parameters.loggingOptOut\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst keyPhrasesOperationSpec: coreClient.OperationSpec = {\n  path: \"/keyPhrases\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyPhraseResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.loggingOptOut\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst languagesOperationSpec: coreClient.OperationSpec = {\n  path: \"/languages\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LanguageResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.input1,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.loggingOptOut\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst sentimentOperationSpec: coreClient.OperationSpec = {\n  path: \"/sentiment\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SentimentResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.input,\n  queryParameters: [\n    Parameters.includeStatistics,\n    Parameters.modelVersion,\n    Parameters.stringIndexType,\n    Parameters.loggingOptOut,\n    Parameters.opinionMining\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The `@azure/logger` configuration for this package.\n * @internal\n */\nexport const logger = createClientLogger(\"ai-text-analytics\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createSpanFunction } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const createSpan = createSpanFunction({\n  packagePrefix: \"Azure.CognitiveServices.TextAnalytics\",\n  namespace: \"Microsoft.CognitiveServices\"\n});\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { FullOperationResponse, OperationOptions, OperationSpec } from \"@azure/core-client\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { logger } from \"./logger\";\nimport {\n  ErrorResponse,\n  GeneratedClient,\n  InnerError,\n  StringIndexType as GeneratedStringIndexType,\n  TextAnalyticsError\n} from \"./generated\";\nimport { TextAnalyticsAction } from \"./textAnalyticsAction\";\nimport { createSpan } from \"./tracing\";\nimport { LroResponse } from \"@azure/core-lro\";\n\n/**\n * @internal\n */\nexport interface IdObject {\n  id: string;\n}\n\n/**\n * Given a sorted array of input objects (with a unique ID) and an unsorted array of results,\n * return a sorted array of results.\n *\n * @internal\n * @param sortedArray - An array of entries sorted by `id`\n * @param unsortedArray - An array of entries that contain `id` but are not sorted\n */\nexport function sortResponseIdObjects<T extends IdObject, U extends IdObject>(\n  sortedArray: T[],\n  unsortedArray: U[]\n): U[] {\n  const unsortedMap = new Map<string, U>();\n  for (const item of unsortedArray) {\n    unsortedMap.set(item.id, item);\n  }\n\n  if (unsortedArray.length !== sortedArray.length) {\n    const ordinal = unsortedArray.length > sortedArray.length ? \"more\" : \"fewer\";\n    logger.warning(\n      `The service returned ${ordinal} responses than inputs. Some errors may be treated as fatal.`\n    );\n  }\n\n  const result: U[] = [];\n  for (const sortedItem of sortedArray) {\n    const item = unsortedMap.get(sortedItem.id);\n    if (item) {\n      result.push(item);\n    }\n  }\n  return result;\n}\n\n/**\n * @internal\n */\nexport interface AssessmentIndex {\n  document: number;\n  sentence: number;\n  assessment: number;\n}\n\n/**\n * @internal\n */\nexport function parseAssessmentIndex(pointer: string): AssessmentIndex {\n  const regex = new RegExp(/#\\/documents\\/(\\d+)\\/sentences\\/(\\d+)\\/assessments\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    const assessmentIndex: AssessmentIndex = {\n      document: parseInt(res[1]),\n      sentence: parseInt(res[2]),\n      assessment: parseInt(res[3])\n    };\n    return assessmentIndex;\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid Assessment pointer`);\n  }\n}\n\n/**\n * Parses the index of the healthcare entity from a JSON pointer.\n * @param pointer - a JSON pointer representing an entity\n * @internal\n */\nexport function parseHealthcareEntityIndex(pointer: string): number {\n  const regex = new RegExp(/#\\/results\\/documents\\/(\\d+)\\/entities\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    return parseInt(res[2]);\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid healthcare entity pointer`);\n  }\n}\n\nconst jsEncodingUnit = \"Utf16CodeUnit\";\n\n/**\n * Measurement units that can used to calculate the offset and length properties.\n */\nexport type StringIndexType = \"TextElement_v8\" | \"UnicodeCodePoint\" | \"Utf16CodeUnit\";\n\n/**\n * @internal\n */\nexport function addStrEncodingParam<Options extends { stringIndexType?: StringIndexType }>(\n  options: Options\n): Options & { stringIndexType: StringIndexType } {\n  return { ...options, stringIndexType: options.stringIndexType || jsEncodingUnit };\n}\n\n/**\n * Set the stringIndexType property with default if it does not exist in x.\n * @param options - operation options bag that has a {@link StringIndexType}\n * @internal\n */\nexport function setStrEncodingParam<X extends { stringIndexType?: GeneratedStringIndexType }>(\n  x: X\n): X & { stringIndexType: GeneratedStringIndexType } {\n  return { ...x, stringIndexType: x.stringIndexType || jsEncodingUnit };\n}\n\nexport function setStrEncodingParamValue(\n  stringIndexType?: GeneratedStringIndexType\n): GeneratedStringIndexType {\n  return stringIndexType || jsEncodingUnit;\n}\n\n/**\n * Set the opinion mining property\n * @internal\n */\nexport function setOpinionMining<X extends { includeOpinionMining?: boolean }>(\n  x: X\n): X & { opinionMining?: boolean } {\n  return { ...x, opinionMining: x.includeOpinionMining };\n}\n\n/**\n * Set the pii categories property\n * @internal\n */\nexport function setCategoriesFilter<X extends { categoriesFilter?: string[] }>(\n  x: X\n): X & { piiCategories?: string[] } {\n  return { ...x, piiCategories: x.categoriesFilter };\n}\n\nexport function setSentenceCount<X extends { maxSentenceCount?: number }>(\n  x: X\n): X & { sentenceCount?: number } {\n  return { ...x, sentenceCount: x.maxSentenceCount };\n}\n\nexport function setOrderBy<X extends { orderBy?: string }>(x: X): X & { sortBy?: string } {\n  return { ...x, sortBy: x.orderBy };\n}\n\n/**\n * @internal\n */\nexport function addParamsToTask<X extends TextAnalyticsAction>(\n  action: X\n): { parameters?: Omit<X, \"actionName\">; taskName?: string } {\n  const { actionName, ...params } = action;\n  return { parameters: params, taskName: actionName };\n}\n\n/**\n * Set the modelVersion property with default if it does not exist in x.\n * @param options - operation options bag that has a {@link StringIndexType}\n * @internal\n */\nexport function setModelVersionParam<X extends { modelVersion?: string }>(\n  x: X\n): X & { modelVersion: string } {\n  return { ...x, modelVersion: x.modelVersion || \"latest\" };\n}\n\n/**\n * @internal\n */\nexport interface PageParam {\n  top: number;\n  skip: number;\n}\n\n/**\n * @internal\n */\nexport function getOperationId(operationLocation: string): string {\n  const lastSlashIndex = operationLocation.lastIndexOf(\"/\");\n  return operationLocation.substring(lastSlashIndex + 1);\n}\n\nfunction appendReadableErrorMessage(currentMessage: string, innerMessage: string): string {\n  let message = currentMessage;\n  if (message.slice(-1) !== \".\") {\n    message = message + \".\";\n  }\n  return message + \" \" + innerMessage;\n}\n\n/**\n * @internal\n * parses incoming errors from the service and if the inner error code is\n * InvalidDocumentBatch, it exposes that as the statusCode instead.\n * @param error - the incoming error\n */\nexport function compileError(errorResponse: unknown): any {\n  const castErrorResponse = errorResponse as {\n    response: {\n      parsedBody?: ErrorResponse;\n    };\n    statusCode: number;\n  };\n  const topLevelError = castErrorResponse.response.parsedBody?.error;\n  if (!topLevelError) return errorResponse;\n  let errorMessage = topLevelError.message || \"\";\n  let invalidDocumentBatchCode = false;\n  function unwrap(error: TextAnalyticsError | InnerError): TextAnalyticsError {\n    if (error?.innererror !== undefined && error.innererror.message !== undefined) {\n      if (error.innererror.code === \"InvalidDocumentBatch\") {\n        invalidDocumentBatchCode = true;\n      }\n      errorMessage = appendReadableErrorMessage(errorMessage, error.innererror.message);\n      return unwrap(error.innererror);\n    }\n    return error as TextAnalyticsError;\n  }\n  unwrap(topLevelError);\n  return new RestError(errorMessage, {\n    code: invalidDocumentBatchCode ? \"InvalidDocumentBatch\" : topLevelError.code,\n    statusCode: castErrorResponse.statusCode\n  });\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @internal\n * @param timeInMs - The number of milliseconds to be delayed.\n * @returns Resolved promise\n */\nexport function delay(timeInMs: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(() => resolve(), timeInMs));\n}\n\n/**\n * @internal\n */\nexport function compose<T1, T2, T3>(fn1: (x: T1) => T2, fn2: (y: T2) => T3): (x: T1) => T3 {\n  return (value: T1) => fn2(fn1(value));\n}\n\n/**\n * @internal\n */\nexport async function getRawResponse<TOptions extends OperationOptions, TResult>(\n  f: (options: TOptions) => Promise<TResult>,\n  options: TOptions\n): Promise<LroResponse<TResult>> {\n  const { onResponse } = options || {};\n  let rawResponse: FullOperationResponse | undefined = undefined;\n  const flatResponse = await f({\n    ...options,\n    onResponse: (response: FullOperationResponse, flatResponseParam: unknown) => {\n      rawResponse = response;\n      onResponse?.(response, flatResponseParam);\n    }\n  });\n  return {\n    flatResponse,\n    rawResponse: {\n      statusCode: rawResponse!.status,\n      headers: rawResponse!.headers.toJSON(),\n      body: rawResponse!.parsedBody\n    }\n  };\n}\n\n/**\n * @internal\n */\nexport async function sendGetRequest<TOptions extends OperationOptions>(\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  client: GeneratedClient,\n  spec: OperationSpec,\n  spanStr: string,\n  options: TOptions,\n  path: string\n): Promise<LroResponse<unknown>> {\n  const { span, updatedOptions: finalOptions } = createSpan(\n    `TextAnalyticsClient-${spanStr}`,\n    options\n  );\n  try {\n    const { flatResponse, rawResponse } = await getRawResponse(\n      (paramOptions) =>\n        client.sendOperationRequest(\n          { options: paramOptions },\n          {\n            ...spec,\n            path,\n            httpMethod: \"GET\"\n          }\n        ),\n      finalOptions\n    );\n    return {\n      flatResponse: flatResponse,\n      rawResponse\n    };\n  } catch (e) {\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: e.message\n    });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError as GeneratedTextAnalyticsErrorModel,\n  InnerError,\n  ErrorCodeValue,\n  InnerErrorCodeValue,\n  TextAnalyticsWarning,\n  DocumentError,\n  TextDocumentBatchStatistics,\n  TextDocumentInput\n} from \"./generated/models\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * The result of a text analytics operation on a single input document.\n * @internal\n */\nexport type TextAnalyticsResult = TextAnalyticsSuccessResult | TextAnalyticsErrorResult;\n\n/**\n * An Error Code returned from the Text Analytics service. Possible\n * values include:\n *\n * For more information about the error, see the `message` property of the associated error.\n */\nexport type ErrorCode = ErrorCodeValue | InnerErrorCodeValue;\n\n/**\n * Type describing an error from the Text Analytics service.\n */\nexport interface TextAnalyticsError {\n  /**\n   * A code describing the kind of error produced\n   */\n  readonly code: ErrorCode;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The target of the particular error (for example, the name of an invalid parameter)\n   */\n  readonly target?: string;\n}\n\n/**\n * Base type for results of text analytics operations corresponding to a single\n * input document.\n */\nexport interface TextAnalyticsSuccessResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * Statistics about the input document and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  readonly statistics?: TextDocumentStatistics;\n\n  /**\n   * An array of warning data corresponding to this document.\n   *\n   * If no warnings were returned, this array will be empty.\n   */\n  readonly warnings: TextAnalyticsWarning[];\n\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * Base type for error results of text analytics operations corresponding to a\n * single document.\n */\nexport interface TextAnalyticsErrorResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * The Error for this document result.\n   */\n  readonly error: TextAnalyticsError;\n}\n\n/**\n * @internal\n */\nexport interface StandardTextAnalyticsResultArray<T1 extends TextAnalyticsSuccessResult>\n  extends Array<T1 | TextAnalyticsErrorResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport interface CustomTextAnalyticsResultArray<T1 extends TextAnalyticsSuccessResult>\n  extends Array<T1 | TextAnalyticsErrorResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates the project name for the model.\n   */\n  projectName: string;\n  /**\n   * This field indicates the deployment name for the model.\n   */\n  deploymentName: string;\n}\n\n/**\n * @internal\n */\nexport interface StandardTextAnalyticsResponse<T1 extends TextAnalyticsSuccessResult> {\n  /**\n   * Response by document\n   */\n  documents: T1[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  /**\n   * if includeStatistics=true was specified in the request this field will contain information about the request payload.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport interface CustomTextAnalyticsResponse<T1 extends TextAnalyticsSuccessResult> {\n  /**\n   * Response by document\n   */\n  documents: T1[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  /**\n   * if includeStatistics=true was specified in the request this field will contain information about the request payload.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates the project name for the model.\n   */\n  projectName: string;\n  /**\n   * This field indicates the deployment name for the model.\n   */\n  deploymentName: string;\n}\n\n/**\n * Helper function for converting nested service error into\n * the unified TextAnalyticsError\n * @internal\n */\nexport function intoTextAnalyticsError(\n  errorModel: GeneratedTextAnalyticsErrorModel | InnerError\n): TextAnalyticsError {\n  // Return the deepest error. This will always be at most\n  // one level for TextAnalytics\n  if (errorModel.innererror !== undefined) {\n    return intoTextAnalyticsError(errorModel.innererror);\n  }\n\n  return {\n    code: errorModel.code,\n    message: errorModel.message,\n    target: errorModel.target\n  };\n}\n\n/**\n * @internal\n */\nexport function makeTextAnalyticsSuccessResult(\n  id: string,\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): TextAnalyticsSuccessResult {\n  return {\n    id,\n    statistics,\n    warnings\n  };\n}\n\n/**\n * @internal\n */\nexport function makeTextAnalyticsErrorResult(\n  id: string,\n  error: GeneratedTextAnalyticsErrorModel\n): TextAnalyticsErrorResult {\n  return {\n    id,\n    error: intoTextAnalyticsError(error)\n  };\n}\n\n/**\n * @internal\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array.\n * @param input - the array of documents sent to the service for processing.\n * @param response - the response received from the service.\n */\nexport function combineSuccessfulAndErroneousDocuments<TSuccess extends TextAnalyticsSuccessResult>(\n  input: TextDocumentInput[],\n  response: StandardTextAnalyticsResponse<TSuccess>\n): (TSuccess | TextAnalyticsErrorResult)[] {\n  return processAndCombineSuccessfulAndErroneousDocuments(\n    input,\n    response,\n    (x) => x,\n    makeTextAnalyticsErrorResult\n  );\n}\n\n/**\n * @internal\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array.\n * @param input - the array of documents sent to the service for processing.\n * @param response - the response received from the service.\n * @param process - a function to convert the results from one type to another.\n */\nexport function processAndCombineSuccessfulAndErroneousDocuments<\n  TSuccessService extends TextAnalyticsSuccessResult,\n  TSuccessSDK extends TextAnalyticsSuccessResult,\n  TError extends TextAnalyticsErrorResult\n>(\n  input: TextDocumentInput[],\n  response: {\n    documents: TSuccessService[];\n    errors: DocumentError[];\n  },\n  processSuccess: (successResult: TSuccessService) => TSuccessSDK,\n  processError: (id: string, error: GeneratedTextAnalyticsErrorModel) => TError\n): (TSuccessSDK | TextAnalyticsErrorResult)[] {\n  const successResults: (TSuccessSDK | TextAnalyticsErrorResult)[] = response.documents.map(\n    processSuccess\n  );\n  const unsortedResults = successResults.concat(\n    response.errors.map((error) => processError(error.id, error.error))\n  );\n\n  return sortResponseIdObjects(input, unsortedResults);\n}\n\n/**\n * @internal\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array. It\n * also attaches statistics and modelVersion to the returned array.\n * @param input - the array of documents sent to the service for processing.\n * @param response - the response received from the service.\n */\nexport function combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion<\n  TSuccessService extends TextAnalyticsSuccessResult,\n  TSuccessSDK extends TextAnalyticsSuccessResult,\n  TError extends TextAnalyticsErrorResult\n>(\n  input: TextDocumentInput[],\n  response: StandardTextAnalyticsResponse<TSuccessService>,\n  processSuccess: (doc: TSuccessService) => TSuccessSDK,\n  processError: (id: string, error: GeneratedTextAnalyticsErrorModel) => TError\n): StandardTextAnalyticsResultArray<TSuccessSDK> {\n  const sorted = processAndCombineSuccessfulAndErroneousDocuments(\n    input,\n    response,\n    processSuccess,\n    processError\n  );\n  return Object.assign(sorted, {\n    statistics: response.statistics,\n    modelVersion: response.modelVersion\n  });\n}\n\n/**\n * @internal\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array. It\n * also attaches statistics, projectName, and deploymentName to the returned array.\n * @param input - the array of documents sent to the service for processing.\n * @param response - the response received from the service.\n */\nexport function combineSuccessfulAndErroneousDocumentsWithStatisticsAndCustomProjectInfo<\n  TSuccessService extends TextAnalyticsSuccessResult,\n  TSuccessSDK extends TextAnalyticsSuccessResult,\n  TError extends TextAnalyticsErrorResult\n>(\n  input: TextDocumentInput[],\n  response: CustomTextAnalyticsResponse<TSuccessService>,\n  processSuccess: (doc: TSuccessService) => TSuccessSDK,\n  processError: (id: string, error: GeneratedTextAnalyticsErrorModel) => TError\n): CustomTextAnalyticsResultArray<TSuccessSDK> {\n  const sorted = processAndCombineSuccessfulAndErroneousDocuments(\n    input,\n    response,\n    processSuccess,\n    processError\n  );\n  return Object.assign(sorted, {\n    statistics: response.statistics,\n    projectName: response.projectName,\n    deploymentName: response.deploymentName\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { DetectedLanguage, TextAnalyticsError, DocumentLanguage } from \"./generated/models\";\n\n/**\n * The result of the detect language operation on a single document.\n */\nexport type DetectLanguageResult = DetectLanguageSuccessResult | DetectLanguageErrorResult;\n\n/**\n * The result of the detect language operation on a single document,\n * containing a prediction of what language the document is written in.\n */\nexport interface DetectLanguageSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The top detected language by confidence score.\n   */\n  readonly primaryLanguage: DetectedLanguage;\n}\n\n/**\n * An error result from the detect languge operation on a single document.\n */\nexport type DetectLanguageErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeDetectLanguageResult(response: DocumentLanguage): DetectLanguageSuccessResult {\n  const { id, warnings, statistics, detectedLanguage } = response;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    primaryLanguage: detectedLanguage\n  };\n}\n\n/**\n * @internal\n */\nexport function makeDetectLanguageErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): DetectLanguageErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TextDocumentBatchStatistics, LanguageResult, TextDocumentInput } from \"./generated/models\";\nimport {\n  DetectLanguageResult,\n  makeDetectLanguageResult,\n  makeDetectLanguageErrorResult\n} from \"./detectLanguageResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion } from \"./textAnalyticsResult\";\n\n/**\n * Array of `DetectLanguageResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface DetectLanguageResultArray extends Array<DetectLanguageResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport function makeDetectLanguageResultArray(\n  input: TextDocumentInput[],\n  response: LanguageResult\n): DetectLanguageResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion(\n    input,\n    response,\n    makeDetectLanguageResult,\n    makeDetectLanguageErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { Entity, TextAnalyticsError, DocumentEntities } from \"./generated/models\";\n\n/**\n * An entity from text analysis with information about its categorical\n * classification.\n */\nexport interface CategorizedEntity extends Entity {}\n\n/**\n * The result of the recognize entities operation on a single document.\n */\nexport type RecognizeCategorizedEntitiesResult =\n  | RecognizeCategorizedEntitiesSuccessResult\n  | RecognizeCategorizedEntitiesErrorResult;\n\n/**\n * The result of the recognize entities operation on a single document, containing the collection of\n * `Entity` objects identified in that document.\n */\nexport interface RecognizeCategorizedEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: CategorizedEntity[];\n}\n\n/**\n * An error result from the recognize entities operation on a single document.\n */\nexport type RecognizeCategorizedEntitiesErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeRecognizeCategorizedEntitiesResult(\n  result: DocumentEntities\n): RecognizeCategorizedEntitiesSuccessResult {\n  const { entities, statistics, warnings, id } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities\n  };\n}\n\n/**\n * @internal\n */\nexport function makeRecognizeCategorizedEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizeCategorizedEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TextDocumentBatchStatistics, TextDocumentInput, EntitiesResult } from \"./generated/models\";\nimport {\n  RecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesErrorResult\n} from \"./recognizeCategorizedEntitiesResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion } from \"./textAnalyticsResult\";\n\n/**\n * Array of `RecognizeCategorizedEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeCategorizedEntitiesResultArray\n  extends Array<RecognizeCategorizedEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport function makeRecognizeCategorizedEntitiesResultArray(\n  input: TextDocumentInput[],\n  response: EntitiesResult\n): RecognizeCategorizedEntitiesResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion(\n    input,\n    response,\n    makeRecognizeCategorizedEntitiesResult,\n    makeRecognizeCategorizedEntitiesErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextAnalyticsError,\n  DocumentSentimentLabel,\n  SentimentConfidenceScores,\n  SentenceSentiment as GeneratedSentenceSentiment,\n  SentenceSentimentLabel,\n  DocumentSentiment,\n  SentenceTarget,\n  TargetRelation,\n  SentenceAssessment,\n  TokenSentimentValue as SentenceTargetSentiment,\n  TargetConfidenceScoreLabel\n} from \"./generated/models\";\nimport { AssessmentIndex, parseAssessmentIndex } from \"./util\";\n\n/**\n * The result of the analyze sentiment operation on a single document.\n */\nexport type AnalyzeSentimentResult = AnalyzeSentimentSuccessResult | AnalyzeSentimentErrorResult;\n\n/**\n *  The result of the analyze sentiment operation on a single document,\n *  containing the predicted sentiment for each sentence as well as for the full document.\n */\nexport interface AnalyzeSentimentSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * Predicted sentiment for document. Possible values\n   * include: 'positive', 'neutral', 'negative', 'mixed'\n   */\n  sentiment: DocumentSentimentLabel;\n  /**\n   * Document level sentiment confidence scores between 0 and 1 for each sentiment class.\n   */\n  confidenceScores: SentimentConfidenceScores;\n  /**\n   * The predicted sentiment for each sentence in the corresponding document.\n   */\n  sentences: SentenceSentiment[];\n}\n\n/**\n * The predicted sentiment for a given span of text. For more information regarding text sentiment, see https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/how-tos/text-analytics-how-to-sentiment-analysis.\n */\nexport interface SentenceSentiment {\n  /**\n   * The sentence text.\n   */\n  text: string;\n  /**\n   * The predicted Sentiment for the sentence.\n   */\n  sentiment: SentenceSentimentLabel;\n  /**\n   * The sentiment confidence score between 0 and 1 for the sentence for all classes.\n   */\n  confidenceScores: SentimentConfidenceScores;\n  /**\n   * The sentence text offset from the start of the document.\n   */\n  offset: number;\n  /**\n   * The length of the sentence text.\n   */\n  length: number;\n  /**\n   * The list of opinions mined from this sentence. For example in \"The food is\n   * good, but the service is bad\", we would mine these two opinions \"food is\n   * good\", \"service is bad\". Only returned if `includeOpinionMining` is set to\n   * True in the call to `analyzeSentiment`.\n   */\n  opinions: Opinion[];\n}\n\n/**\n * TargetSentiment contains the predicted sentiment, confidence scores and other\n * information about an target of a product. A target of a product/service is a\n * key component of that product/service. For example in \"The food at Hotel Foo\n * is good\", \"food\" is a target of \"Hotel Foo\".\n */\nexport interface TargetSentiment {\n  /**\n   * The sentiment confidence score between 0 and 1 for the target for\n   * 'positive' and 'negative' labels.\n   */\n  confidenceScores: TargetConfidenceScoreLabel;\n  /**\n   * The predicted Sentiment for the Target. Possible values include 'positive',\n   * 'mixed', and 'negative'.\n   */\n  sentiment: SentenceTargetSentiment;\n  /**\n   * The target text.\n   */\n  text: string;\n  /**\n   * The Target text offset from the start of the sentence.\n   */\n  offset: number;\n  /**\n   * The length of the Target text.\n   */\n  length: number;\n}\n\n/**\n * AssessmentSentiment contains the predicted sentiment, confidence scores and\n * other information about an assessment of a target. For example, in the sentence\n * \"The food is good\", the assessment of the target 'food' is 'good'.\n */\nexport interface AssessmentSentiment extends SentenceAssessment {}\n\n/**\n * A mined opinion object represents an opinion we've extracted from a sentence.\n * It consists of both a target that these assessments are about, and the actual\n * assessments themselves.\n */\nexport interface Opinion {\n  /**\n   * The target of a product/service that this assessment is about.\n   */\n  target: TargetSentiment;\n  /**\n   * The actual assessments of the target.\n   */\n  assessments: AssessmentSentiment[];\n}\n\n/**\n * An error result from the analyze sentiment operation on a single document.\n */\nexport type AnalyzeSentimentErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @param document - A document result coming from the service.\n * @internal\n */\nexport function makeAnalyzeSentimentResult(\n  result: DocumentSentiment\n): AnalyzeSentimentSuccessResult {\n  const {\n    id,\n    sentiment,\n    confidenceScores,\n    sentenceSentiments: sentences,\n    warnings,\n    statistics\n  } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    sentiment,\n    confidenceScores,\n    sentences: sentences.map((sentence) => convertGeneratedSentenceSentiment(sentence, result))\n  };\n}\n\n/**\n * @internal\n */\nexport function makeAnalyzeSentimentErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): AnalyzeSentimentErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n\n/**\n * Converts a sentence sentiment object returned by the service to another that\n * is user-friendly.\n *\n * @param sentence - The sentence sentiment object to be converted.\n * @param response - The entire response returned by the service.\n * @returns The user-friendly sentence sentiment object.\n * @internal\n */\nfunction convertGeneratedSentenceSentiment(\n  sentence: GeneratedSentenceSentiment,\n  result: DocumentSentiment\n): SentenceSentiment {\n  return {\n    confidenceScores: sentence.confidenceScores,\n    sentiment: sentence.sentiment,\n    text: sentence.text,\n    offset: sentence.offset,\n    length: sentence.length,\n    opinions: sentence.targets\n      ? sentence.targets.map(\n          (target: SentenceTarget): Opinion => ({\n            target: {\n              confidenceScores: target.confidenceScores,\n              sentiment: target.sentiment,\n              text: target.text,\n              offset: target.offset,\n              length: target.length\n            },\n            assessments: target.relations\n              .filter((relation) => relation.relationType === \"assessment\")\n              .map((relation) => convertTargetRelationToAssessmentSentiment(relation, result))\n          })\n        )\n      : []\n  };\n}\n\n/**\n * Converts a target relation object returned by the service to an assessment\n * sentiment object where JSON pointers in the former are realized in the\n * latter.\n *\n * @param targetRelation - The target relation object to be converted.\n * @param response - The entire response returned by the service.\n * @returns The user-friendly assessment sentiment object.\n * @internal\n */\nfunction convertTargetRelationToAssessmentSentiment(\n  targetRelation: TargetRelation,\n  result: DocumentSentiment\n): AssessmentSentiment {\n  const assessmentPtr = targetRelation.ref;\n  const assessmentIndex: AssessmentIndex = parseAssessmentIndex(assessmentPtr);\n  const assessment: SentenceAssessment | undefined =\n    result.sentenceSentiments?.[assessmentIndex.sentence].assessments?.[assessmentIndex.assessment];\n  if (assessment !== undefined) {\n    return assessment;\n  } else {\n    throw new Error(`Pointer \"${assessmentPtr}\" is not a valid Assessment pointer`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  SentimentResponse\n} from \"./generated/models\";\nimport {\n  AnalyzeSentimentResult,\n  makeAnalyzeSentimentErrorResult,\n  makeAnalyzeSentimentResult\n} from \"./analyzeSentimentResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion } from \"./textAnalyticsResult\";\n\n/**\n * Array of `AnalyzeSentimentResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface AnalyzeSentimentResultArray extends Array<AnalyzeSentimentResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport function makeAnalyzeSentimentResultArray(\n  input: TextDocumentInput[],\n  response: SentimentResponse\n): AnalyzeSentimentResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion(\n    input,\n    response,\n    makeAnalyzeSentimentResult,\n    makeAnalyzeSentimentErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { TextAnalyticsError, DocumentKeyPhrases } from \"./generated/models\";\n\n/**\n * The result of the extract key phrases operation on a single document.\n */\nexport type ExtractKeyPhrasesResult = ExtractKeyPhrasesSuccessResult | ExtractKeyPhrasesErrorResult;\n\n/**\n * The result of the extract key phrases operation on a single document,\n * containing a collection of the key phrases identified in that document.\n */\nexport interface ExtractKeyPhrasesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * A list of representative words or phrases. The number of key phrases returned is proportional\n   * to the number of words in the input document.\n   */\n  keyPhrases: string[];\n}\n\n/**\n * An error result from the extract key phrases operation on a single document.\n */\nexport type ExtractKeyPhrasesErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeExtractKeyPhrasesResult(\n  result: DocumentKeyPhrases\n): ExtractKeyPhrasesSuccessResult {\n  const { id, warnings, statistics, keyPhrases } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    keyPhrases\n  };\n}\n\n/**\n * @internal\n */\nexport function makeExtractKeyPhrasesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): ExtractKeyPhrasesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  KeyPhraseResult\n} from \"./generated/models\";\nimport {\n  ExtractKeyPhrasesResult,\n  makeExtractKeyPhrasesResult,\n  makeExtractKeyPhrasesErrorResult\n} from \"./extractKeyPhrasesResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion } from \"./textAnalyticsResult\";\n\n/**\n * Array of `ExtractKeyPhrasesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface ExtractKeyPhrasesResultArray extends Array<ExtractKeyPhrasesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport function makeExtractKeyPhrasesResultArray(\n  input: TextDocumentInput[],\n  response: KeyPhraseResult\n): ExtractKeyPhrasesResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion(\n    input,\n    response,\n    makeExtractKeyPhrasesResult,\n    makeExtractKeyPhrasesErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { Entity, PiiDocumentEntities, TextAnalyticsError } from \"./generated/models\";\n\n/**\n * An entity from PII recognition with information about the kind of PII\n * encountered.\n */\nexport interface PiiEntity extends Entity {}\n\n/**\n * The result of the recognize entities operation on a single document.\n */\nexport type RecognizePiiEntitiesResult =\n  | RecognizePiiEntitiesSuccessResult\n  | RecognizePiiEntitiesErrorResult;\n\n/**\n * The result of the recognize entities operation on a single document, containing the collection of\n * `Entity` objects identified in that document.\n */\nexport interface RecognizePiiEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: PiiEntity[];\n  /**\n   * The text redacted.\n   */\n  redactedText: string;\n}\n\n/**\n * An error result from the recognize entities operation on a single document.\n */\nexport type RecognizePiiEntitiesErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeRecognizePiiEntitiesResult(\n  document: PiiDocumentEntities\n): RecognizePiiEntitiesSuccessResult {\n  const { id, entities, warnings, statistics, redactedText } = document;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities,\n    redactedText\n  };\n}\n\n/**\n * @internal\n */\nexport function makeRecognizePiiEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizePiiEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TextDocumentBatchStatistics, TextDocumentInput, PiiResult } from \"./generated/models\";\nimport {\n  RecognizePiiEntitiesResult,\n  makeRecognizePiiEntitiesResult,\n  makeRecognizePiiEntitiesErrorResult\n} from \"./recognizePiiEntitiesResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion } from \"./textAnalyticsResult\";\n\n/**\n * Collection of `RecognizePiiEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizePiiEntitiesResultArray extends Array<RecognizePiiEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport function makeRecognizePiiEntitiesResultArray(\n  input: TextDocumentInput[],\n  response: PiiResult\n): RecognizePiiEntitiesResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion(\n    input,\n    response,\n    makeRecognizePiiEntitiesResult,\n    makeRecognizePiiEntitiesErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { TextAnalyticsError, LinkedEntity, DocumentLinkedEntities } from \"./generated/models\";\n\n/**\n * The result of the recognize linked entities operation on a single document.\n */\nexport type RecognizeLinkedEntitiesResult =\n  | RecognizeLinkedEntitiesSuccessResult\n  | RecognizeLinkedEntitiesErrorResult;\n\n/**\n * The result of the recognize linked entities operation on a single document,\n * containing a collection of the `LinkedEntity` objects identified in that document.\n */\nexport interface RecognizeLinkedEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: LinkedEntity[];\n}\n\n/**\n * An error result from the recognize linked entities operation on a single document.\n */\nexport type RecognizeLinkedEntitiesErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeRecognizeLinkedEntitiesResult(\n  result: DocumentLinkedEntities\n): RecognizeLinkedEntitiesSuccessResult {\n  const { statistics, id, warnings, entities } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities\n  };\n}\n\n/**\n * @internal\n */\nexport function makeRecognizeLinkedEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizeLinkedEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  EntityLinkingResult\n} from \"./generated/models\";\nimport {\n  RecognizeLinkedEntitiesResult,\n  makeRecognizeLinkedEntitiesResult,\n  makeRecognizeLinkedEntitiesErrorResult\n} from \"./recognizeLinkedEntitiesResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion } from \"./textAnalyticsResult\";\n\n/**\n * Array of `RecognizeLinkedEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeLinkedEntitiesResultArray extends Array<RecognizeLinkedEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport function makeRecognizeLinkedEntitiesResultArray(\n  input: TextDocumentInput[],\n  response: EntityLinkingResult\n): RecognizeLinkedEntitiesResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion(\n    input,\n    response,\n    makeRecognizeLinkedEntitiesResult,\n    makeRecognizeLinkedEntitiesErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  PipelineResponse,\n  PipelineRequest,\n  SendRequest,\n  PipelinePolicy\n} from \"@azure/core-rest-pipeline\";\n\nconst API_KEY_HEADER_NAME = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * The programmatic identifier of the textAnalyticsAzureKeyCredentialPolicy.\n */\nexport const textAnalyticsAzureKeyCredentialPolicyName = \"textAnalyticsAzureKeyCredentialPolicy\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Text Analytics\n * @internal\n */\nexport function textAnalyticsAzureKeyCredentialPolicy(credential: KeyCredential): PipelinePolicy {\n  return {\n    name: textAnalyticsAzureKeyCredentialPolicyName,\n    sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      request.headers.set(API_KEY_HEADER_NAME, credential.key);\n      return next(request);\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  DocumentHealthcareEntities,\n  Entity,\n  HealthcareRelation,\n  TextDocumentBatchStatistics,\n  HealthcareEntity as GeneratedHealthcareEntity,\n  TextAnalyticsError,\n  HealthcareAssertion,\n  RelationType,\n  HealthcareRelationEntity,\n  HealthcareEntityCategory\n} from \"./generated/models\";\nimport {\n  makeTextAnalyticsErrorResult,\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  TextAnalyticsSuccessResult\n} from \"./textAnalyticsResult\";\nimport { parseHealthcareEntityIndex } from \"./util\";\n\n/**\n * A type representing a reference for the healthcare entity into a specific\n * entity catalog.\n */\nexport interface EntityDataSource {\n  /**\n   * Entity Catalog. Examples include: UMLS, CHV, MSH, etc.\n   */\n  name: string;\n  /**\n   * Entity id in the given source catalog.\n   */\n  entityId: string;\n}\n\n/**\n * A healthcare entity represented as a node in a directed graph where the edges are\n * a particular type of relationship between the source and target nodes.\n */\nexport interface HealthcareEntity extends Entity {\n  /**\n   * Normalized name for the entity. For example, the normalized text for \"histologically\" is \"histologic\".\n   */\n  normalizedText?: string;\n  /**\n   * Whether the entity is negated.\n   */\n  assertion?: HealthcareAssertion;\n  /**\n   * Entity references in known data sources.\n   */\n  dataSources: EntityDataSource[];\n  /**\n   * Defines values for HealthcareEntityCategory.\n   * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,\n   *  this enum contains the known values that the service supports.\n   * ### Known values supported by the service\n   * **BODY_STRUCTURE**\n   * **AGE**\n   * **GENDER**\n   * **EXAMINATION_NAME**\n   * **DATE**\n   * **DIRECTION**\n   * **FREQUENCY**\n   * **MEASUREMENT_VALUE**\n   * **MEASUREMENT_UNIT**\n   * **RELATIONAL_OPERATOR**\n   * **TIME**\n   * **GENE_OR_PROTEIN**\n   * **VARIANT**\n   * **ADMINISTRATIVE_EVENT**\n   * **CARE_ENVIRONMENT**\n   * **HEALTHCARE_PROFESSION**\n   * **DIAGNOSIS**\n   * **SYMPTOM_OR_SIGN**\n   * **CONDITION_QUALIFIER**\n   * **MEDICATION_CLASS**\n   * **MEDICATION_NAME**\n   * **DOSAGE**\n   * **MEDICATION_FORM**\n   * **MEDICATION_ROUTE**\n   * **FAMILY_RELATION**\n   * **TREATMENT_NAME**\n   */\n  category: HealthcareEntityCategory;\n}\n\n/**\n * The type of different roles a healthcare entity can play in a relation.\n */\nexport type HealthcareEntityRelationRoleType = string;\n\n/**\n * A healthcare entity that plays a specific role in a relation.\n */\nexport interface HealthcareEntityRelationRole {\n  /**\n   * A healthcare entity\n   */\n  entity: HealthcareEntity;\n  /**\n   * The role of the healthcare entity in a particular relation.\n   */\n  name: HealthcareEntityRelationRoleType;\n}\n\n/**\n * A relationship between two or more healthcare entities.\n */\nexport interface HealthcareEntityRelation {\n  /**\n   * The type of the healthcare relation.\n   */\n  relationType: RelationType;\n  /**\n   * The list of healthcare entities and their roles in the healthcare relation.\n   */\n  roles: HealthcareEntityRelationRole[];\n}\n\n/**\n * The results of a successful healthcare operation for a single document.\n */\nexport interface AnalyzeHealthcareEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * Healthcare entities.\n   */\n  entities: HealthcareEntity[];\n  /**\n   * Relations between healthcare entities.\n   */\n  entityRelations: HealthcareEntityRelation[];\n}\n\n/**\n * An error result from the healthcare operation on a single document.\n */\nexport type AnalyzeHealthcareEntitiesErrorResult = TextAnalyticsErrorResult;\n\n/**\n * The result of the healthcare operation on a single document.\n */\nexport type AnalyzeHealthcareEntitiesResult =\n  | AnalyzeHealthcareEntitiesSuccessResult\n  | AnalyzeHealthcareEntitiesErrorResult;\n\n/**\n * Array of {@link AnalyzeHealthcareEntitiesResult}\n */\nexport interface AnalyzeHealthcareEntitiesResultArray\n  extends Array<AnalyzeHealthcareEntitiesResult> {}\n\n/**\n * The results of a healthcare operation represented as a paged iterator that can\n * either iterate over the results on a document-by-document basis or, by\n * byPage(), can iterate over pages of documents.\n */\nexport type PagedAsyncIterableAnalyzeHealthcareEntitiesResult = PagedAsyncIterableIterator<\n  AnalyzeHealthcareEntitiesResult,\n  AnalyzeHealthcareEntitiesResultArray\n>;\n\n/**\n * The results of a healthcare operation represented as a paged iterator that can\n * either iterate over the results on a document-by-document basis or, by\n * byPage(), can iterate over pages of documents.\n */\nexport interface PagedAnalyzeHealthcareEntitiesResult\n  extends PagedAsyncIterableAnalyzeHealthcareEntitiesResult {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * Creates a user-friendly healthcare entity represented as a node in a graph\n * @param entity - the healthcare entity returned by the service\n * @internal\n */\nfunction makeHealthcareEntitiesWithoutNeighbors(\n  entity: GeneratedHealthcareEntity\n): HealthcareEntity {\n  const {\n    category,\n    confidenceScore,\n    assertion,\n    offset,\n    text,\n    links,\n    subcategory,\n    length,\n    name\n  } = entity;\n  return {\n    category,\n    confidenceScore,\n    assertion,\n    offset,\n    length,\n    text,\n    normalizedText: name,\n    subCategory: subcategory,\n    dataSources:\n      links?.map(({ dataSource, id }): EntityDataSource => ({ name: dataSource, entityId: id })) ??\n      []\n  };\n}\n\n/**\n * @internal\n */\nfunction makeHealthcareRelations(\n  entities: HealthcareEntity[],\n  relations: HealthcareRelation[]\n): HealthcareEntityRelation[] {\n  return relations.map(\n    (relation: HealthcareRelation): HealthcareEntityRelation => ({\n      relationType: relation.relationType,\n      roles: relation.entities.map(\n        (role: HealthcareRelationEntity): HealthcareEntityRelationRole => ({\n          entity: entities[parseHealthcareEntityIndex(role.ref)],\n          name: role.role\n        })\n      )\n    })\n  );\n}\n\n/**\n * Creates a healthcare entity in the convenience layer from the one sent by the service.\n * @param document - incoming results sent by the service for a particular document\n * @internal\n */\nexport function makeHealthcareEntitiesResult(\n  document: DocumentHealthcareEntities\n): AnalyzeHealthcareEntitiesSuccessResult {\n  const { id, entities, relations, warnings, statistics } = document;\n  const newEntities = entities.map(makeHealthcareEntitiesWithoutNeighbors);\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities: newEntities,\n    entityRelations: makeHealthcareRelations(newEntities, relations)\n  };\n}\n\n/**\n * @internal\n */\nexport function makeHealthcareEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): AnalyzeHealthcareEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResponse, PollerLike, RawResponse } from \"@azure/core-lro\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { createSerializer, OperationOptions, OperationSpec } from \"@azure/core-client\";\nimport {\n  AnalyzeHealthcareEntitiesResult,\n  AnalyzeHealthcareEntitiesResultArray,\n  makeHealthcareEntitiesErrorResult,\n  makeHealthcareEntitiesResult,\n  PagedAnalyzeHealthcareEntitiesResult\n} from \"./analyzeHealthcareEntitiesResult\";\nimport {\n  GeneratedClient,\n  GeneratedClientHealthStatusOptionalParams,\n  GeneratedClientHealthStatusResponse,\n  TextDocumentInput\n} from \"./generated\";\nimport { createSpan } from \"./tracing\";\nimport {\n  addStrEncodingParam,\n  getRawResponse,\n  compileError,\n  sendGetRequest,\n  StringIndexType\n} from \"./util\";\nimport * as Mappers from \"./generated/models/mappers\";\nimport {\n  accept,\n  apiVersion,\n  endpoint,\n  includeStatistics,\n  skip,\n  top\n} from \"./generated/models/parameters\";\nimport { processAndCombineSuccessfulAndErroneousDocuments } from \"./textAnalyticsResult\";\nimport { getPagedAsyncIterator, PagedResult } from \"@azure/core-paging\";\nimport { AnalysisPollOperationState } from \"./pollerModels\";\nimport { TextAnalyticsOperationOptions } from \"./textAnalyticsOperationOptions\";\n\n/**\n * Options for the begin analyze healthcare entities operation.\n */\nexport interface BeginAnalyzeHealthcareEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Result type of the Health Long-Running-Operation (LRO)\n */\nexport type AnalyzeHealthcareEntitiesPollerLike = PollerLike<\n  AnalyzeHealthcareOperationState,\n  PagedAnalyzeHealthcareEntitiesResult\n>;\n\n/**\n * The state of the begin analyze healthcare polling operation.\n */\nexport interface AnalyzeHealthcareOperationState\n  extends AnalysisPollOperationState<PagedAnalyzeHealthcareEntitiesResult> {}\n\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\n// Consider whether the spec can be exported by code gen\nconst healthStatusOperationSpec: OperationSpec = {\n  path: \"/entities/health/jobs/{jobId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HealthcareJobState\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [includeStatistics, top, skip],\n  urlParameters: [endpoint, apiVersion],\n  headerParameters: [accept],\n  serializer\n};\n\n/**\n * @internal\n */\nexport class HealthLro implements LongRunningOperation<PagedAnalyzeHealthcareEntitiesResult> {\n  public requestMethod = \"POST\";\n  public requestPath = \"/entities/health/jobs\";\n  constructor(\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: GeneratedClient,\n    private baseOptions: OperationOptions,\n    private initOptions: {\n      modelVersion?: string;\n      stringIndexType?: StringIndexType;\n      loggingOptOut?: boolean;\n    },\n    private pollOptions: {\n      includeStatistics?: boolean;\n    },\n    private documents: TextDocumentInput[]\n  ) {}\n  async sendInitialRequest(): Promise<LroResponse<PagedAnalyzeHealthcareEntitiesResult>> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyzeHealthcare\",\n      {\n        ...this.baseOptions,\n        ...addStrEncodingParam(this.initOptions)\n      }\n    );\n    try {\n      const { flatResponse, rawResponse } = await getRawResponse(\n        (paramOptions) => this.client.health({ documents: this.documents }, paramOptions),\n        finalOptions\n      );\n      return {\n        flatResponse: flatResponse as PagedAnalyzeHealthcareEntitiesResult,\n        rawResponse\n      };\n    } catch (e) {\n      const exception = compileError(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n  async sendPollRequest(path: string): Promise<LroResponse<PagedAnalyzeHealthcareEntitiesResult>> {\n    return sendGetRequest(\n      this.client,\n      healthStatusOperationSpec,\n      \"HealthStatus\",\n      { ...this.baseOptions, ...this.pollOptions },\n      path\n    ) as Promise<LroResponse<PagedAnalyzeHealthcareEntitiesResult>>;\n  }\n}\n\n/**\n * @internal\n */\nexport function isHealthDone(response: unknown): boolean {\n  const castResponse = response as GeneratedClientHealthStatusResponse;\n  switch (castResponse.status) {\n    case \"notStarted\":\n    case \"running\":\n      return false;\n    case \"failed\": {\n      const errors = castResponse.errors\n        ?.map((e) => ` code ${e.code}, message: '${e.message}'`)\n        .join(\"\\n\");\n      const message = `Healthcare analysis failed. Error(s): ${errors || \"\"}`;\n      throw new Error(message);\n    }\n    default: {\n      if (castResponse.results) {\n        return true;\n      } else {\n        throw new Error(\"Healthcare action has finished but the there are no results!\");\n      }\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function processHealthResult(\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  client: GeneratedClient,\n  documents: TextDocumentInput[],\n  options: GeneratedClientHealthStatusOptionalParams\n): (\n  result: unknown,\n  state: AnalyzeHealthcareOperationState\n) => PagedAnalyzeHealthcareEntitiesResult {\n  return (\n    result: unknown,\n    state: AnalyzeHealthcareOperationState\n  ): PagedAnalyzeHealthcareEntitiesResult => {\n    const pollingURL = (state as any).pollingURL;\n    const pagedResult: PagedResult<AnalyzeHealthcareEntitiesResultArray> = {\n      firstPageLink: pollingURL,\n      getPage: async (pageLink: string, maxPageSize?: number) => {\n        const response = await sendGetRequest(\n          client,\n          healthStatusOperationSpec,\n          \"HealthStatus\",\n          // if `top` is set to `undefined`, the default value will not be sent\n          // as part of the request.\n          maxPageSize ? { ...options, top: maxPageSize } : options,\n          pageLink\n        );\n        const flatResponse = response.flatResponse as GeneratedClientHealthStatusResponse;\n        if (flatResponse.results) {\n          return {\n            page: processAndCombineSuccessfulAndErroneousDocuments(\n              documents,\n              flatResponse.results,\n              makeHealthcareEntitiesResult,\n              makeHealthcareEntitiesErrorResult\n            ),\n            nextPageLink: flatResponse.nextLink\n          };\n        } else {\n          throw new Error(\"Healthcare action has succeeded but there are no results!\");\n        }\n      }\n    };\n    const pagedIterator = getPagedAsyncIterator<\n      AnalyzeHealthcareEntitiesResult,\n      AnalyzeHealthcareEntitiesResultArray\n    >(pagedResult);\n    return Object.assign(pagedIterator, {\n      statistics: (result as any).results.statistics,\n      modelVersion: (result as any).results.modelVersion!\n    });\n  };\n}\n\n/**\n * @internal\n */\nexport function updateHealthState(\n  state: AnalyzeHealthcareOperationState,\n  lastResponse: RawResponse\n): void {\n  const response = lastResponse.body as any;\n  state.createdOn = response.createdDateTime;\n  state.lastModifiedOn = response.lastUpdateDateTime;\n  state.expiresOn = response.expirationDateTime;\n  state.status = response.status;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { TextAnalyticsError, MultiClassificationDocument } from \"./generated/models\";\nimport { ClassificationCategory } from \"./singleCategoryClassifyResult\";\n\n/**\n * The result of the custom classify document multi categories operation on a multi document.\n */\nexport type MultiCategoryClassifyResult =\n  | MultiCategoryClassifySuccessResult\n  | MultiCategoryClassifyErrorResult;\n\n/**\n * The result of the custom classify document multi categories operation on a multi document,\n * containing the result of the classification.\n */\nexport interface MultiCategoryClassifySuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of classifications in the input document.\n   */\n  classifications: ClassificationCategory[];\n}\n\n/**\n * An error result from the custom classify document multi category operation on a multi document.\n */\nexport type MultiCategoryClassifyErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeMultiCategoryClassifyResult(\n  result: MultiClassificationDocument\n): MultiCategoryClassifySuccessResult {\n  const { id, warnings, statistics, classifications } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    classifications\n  };\n}\n\n/**\n * @internal\n */\nexport function makeMultiCategoryClassifyErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): MultiCategoryClassifyErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  CustomMultiClassificationResult\n} from \"./generated/models\";\nimport {\n  MultiCategoryClassifyResult,\n  makeMultiCategoryClassifyResult,\n  makeMultiCategoryClassifyErrorResult\n} from \"./multiCategoryClassifyResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndCustomProjectInfo } from \"./textAnalyticsResult\";\n\n/**\n * Array of `MultiCategoryClassifyResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface MultiCategoryClassifyResultArray extends Array<MultiCategoryClassifyResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics custom project used by this operation on this\n   * batch of input documents.\n   */\n  projectName: string;\n  /**\n   * The version of the text analytics custom deployment used by this operation on this\n   * batch of input documents.\n   */\n  deploymentName: string;\n}\n\n/**\n * @internal\n */\nexport function makeMultiCategoryClassifyResultArray(\n  input: TextDocumentInput[],\n  response: CustomMultiClassificationResult\n): MultiCategoryClassifyResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndCustomProjectInfo(\n    input,\n    response,\n    makeMultiCategoryClassifyResult,\n    makeMultiCategoryClassifyErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextAnalyticsError,\n  ClassificationResult,\n  SingleClassificationDocument\n} from \"./generated/models\";\n\n/**\n * The result of the custom classify document single category operation on a single document.\n */\nexport type SingleCategoryClassifyResult =\n  | SingleCategoryClassifySuccessResult\n  | SingleCategoryClassifyErrorResult;\n\n/**\n * The result of the custom classify document single category operation on a single document,\n * containing the result of the classification.\n */\nexport interface SingleCategoryClassifySuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The classification result of the input document.\n   */\n  classification: ClassificationCategory;\n}\n\n/**\n * A classification result from a custom classify document single category action\n */\nexport interface ClassificationCategory extends ClassificationResult {}\n\n/**\n * An error result from the custom classify document single category operation on a single document.\n */\nexport type SingleCategoryClassifyErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeSingleCategoryClassifyResult(\n  result: SingleClassificationDocument\n): SingleCategoryClassifySuccessResult {\n  const { id, warnings, statistics, classification } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    classification\n  };\n}\n\n/**\n * @internal\n */\nexport function makeSingleCategoryClassifyErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): SingleCategoryClassifyErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  CustomSingleClassificationResult\n} from \"./generated/models\";\nimport {\n  SingleCategoryClassifyResult,\n  makeSingleCategoryClassifyResult,\n  makeSingleCategoryClassifyErrorResult\n} from \"./singleCategoryClassifyResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndCustomProjectInfo } from \"./textAnalyticsResult\";\n\n/**\n * Array of `SingleCategoryClassifyResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface SingleCategoryClassifyResultArray extends Array<SingleCategoryClassifyResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics custom project used by this operation on this\n   * batch of input documents.\n   */\n  projectName: string;\n  /**\n   * The version of the text analytics custom deployment used by this operation on this\n   * batch of input documents.\n   */\n  deploymentName: string;\n}\n\n/**\n * @internal\n */\nexport function makeSingleCategoryClassifyResultArray(\n  input: TextDocumentInput[],\n  response: CustomSingleClassificationResult\n): SingleCategoryClassifyResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndCustomProjectInfo(\n    input,\n    response,\n    makeSingleCategoryClassifyResult,\n    makeSingleCategoryClassifyErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextAnalyticsError,\n  ExtractedDocumentSummary,\n  ExtractedSummarySentence as GeneratedSummarySentences\n} from \"./generated/models\";\n\n/**\n * The result of the extract summary operation on a single document.\n */\nexport type ExtractSummaryResult = ExtractSummarySuccessResult | ExtractSummaryErrorResult;\n\n/**\n * The result of the extract summary operation on a single document,\n * containing a collection of the summary identified in that document.\n */\nexport interface ExtractSummarySuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * A list of sentences composing a summary of the input document.\n   */\n  sentences: SummarySentence[];\n}\n\n/**\n * An extracted sentence as part of the summary of a document.\n */\nexport interface SummarySentence {\n  /** The extracted sentence text. */\n  text: string;\n  /** A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance. */\n  rankScore: number;\n  /** The sentence offset from the start of the document, based on the value of the stringIndexType parameter. */\n  offset: number;\n  /** The length of the sentence. */\n  length: number;\n}\n\n/**\n * An error result from the extract summary operation on a single document.\n */\nexport type ExtractSummaryErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeExtractSummaryResult(\n  result: ExtractedDocumentSummary\n): ExtractSummarySuccessResult {\n  const { id, warnings, statistics, sentences } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    sentences: sentences.map((sentence: GeneratedSummarySentences) => ({\n      ...sentence\n    }))\n  };\n}\n\n/**\n * @internal\n */\nexport function makeExtractSummaryErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): ExtractSummaryErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  ExtractiveSummarizationResult\n} from \"./generated/models\";\nimport {\n  ExtractSummaryResult,\n  makeExtractSummaryResult,\n  makeExtractSummaryErrorResult\n} from \"./extractSummaryResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion } from \"./textAnalyticsResult\";\n\n/**\n * Array of `ExtractSummaryResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface ExtractSummaryResultArray extends Array<ExtractSummaryResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\n/**\n * @internal\n */\nexport function makeExtractSummaryResultArray(\n  input: TextDocumentInput[],\n  response: ExtractiveSummarizationResult\n): ExtractSummaryResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndModelVersion(\n    input,\n    response,\n    makeExtractSummaryResult,\n    makeExtractSummaryErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport { TextAnalyticsError, DocumentEntities } from \"./generated/models\";\nimport { CategorizedEntity } from \"./recognizeCategorizedEntitiesResult\";\n\n/**\n * The result of the custom recognize entities operation on a single document.\n */\nexport type RecognizeCustomEntitiesResult =\n  | RecognizeCustomEntitiesSuccessResult\n  | RecognizeCustomEntitiesErrorResult;\n\n/**\n * The result of the recognize custom entities operation on a single document,\n * containing a collection of the entities identified in that document.\n */\nexport interface RecognizeCustomEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  entities: CategorizedEntity[];\n}\n\n/**\n * An error result from the recognize custom entities operation on a single document.\n */\nexport type RecognizeCustomEntitiesErrorResult = TextAnalyticsErrorResult;\n\n/**\n * @internal\n */\nexport function makeRecognizeCustomEntitiesResult(\n  result: DocumentEntities\n): RecognizeCustomEntitiesSuccessResult {\n  const { id, warnings, statistics, entities } = result;\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities\n  };\n}\n\n/**\n * @internal\n */\nexport function makeRecognizeCustomEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizeCustomEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  TextDocumentInput,\n  CustomEntitiesResult\n} from \"./generated/models\";\nimport {\n  RecognizeCustomEntitiesResult,\n  makeRecognizeCustomEntitiesResult,\n  makeRecognizeCustomEntitiesErrorResult\n} from \"./recognizeCustomEntitiesResult\";\nimport { combineSuccessfulAndErroneousDocumentsWithStatisticsAndCustomProjectInfo } from \"./textAnalyticsResult\";\n\n/**\n * Array of `CustomRecognizeEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeCustomEntitiesResultArray extends Array<RecognizeCustomEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics custom project used by this operation on this\n   * batch of input documents.\n   */\n  projectName: string;\n  /**\n   * The version of the text analytics custom deployment used by this operation on this\n   * batch of input documents.\n   */\n  deploymentName: string;\n}\n\n/**\n * @internal\n */\nexport function makeRecognizeCustomEntitiesResultArray(\n  input: TextDocumentInput[],\n  response: CustomEntitiesResult\n): RecognizeCustomEntitiesResultArray {\n  return combineSuccessfulAndErroneousDocumentsWithStatisticsAndCustomProjectInfo(\n    input,\n    response,\n    makeRecognizeCustomEntitiesResult,\n    makeRecognizeCustomEntitiesErrorResult\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  AnalyzeSentimentResultArray,\n  makeAnalyzeSentimentResultArray\n} from \"./analyzeSentimentResultArray\";\nimport {\n  MultiCategoryClassifyResultArray,\n  makeMultiCategoryClassifyResultArray\n} from \"./multiCategoryClassifyResultArray\";\nimport {\n  SingleCategoryClassifyResultArray,\n  makeSingleCategoryClassifyResultArray\n} from \"./singleCategoryClassifyResultArray\";\nimport {\n  ExtractKeyPhrasesResultArray,\n  makeExtractKeyPhrasesResultArray\n} from \"./extractKeyPhrasesResultArray\";\nimport {\n  ExtractSummaryResultArray,\n  makeExtractSummaryResultArray\n} from \"./extractSummaryResultArray\";\nimport { AnalyzeJobState as GeneratedResponse, TextDocumentInput } from \"./generated/models\";\nimport {\n  makeRecognizeCategorizedEntitiesResultArray,\n  RecognizeCategorizedEntitiesResultArray\n} from \"./recognizeCategorizedEntitiesResultArray\";\nimport {\n  makeRecognizeCustomEntitiesResultArray,\n  RecognizeCustomEntitiesResultArray\n} from \"./recognizeCustomEntitiesResultArray\";\nimport {\n  makeRecognizeLinkedEntitiesResultArray,\n  RecognizeLinkedEntitiesResultArray\n} from \"./recognizeLinkedEntitiesResultArray\";\nimport {\n  makeRecognizePiiEntitiesResultArray,\n  RecognizePiiEntitiesResultArray\n} from \"./recognizePiiEntitiesResultArray\";\nimport { ErrorCode, intoTextAnalyticsError, TextAnalyticsError } from \"./textAnalyticsResult\";\n\n/**\n * The results of an analyze Actions operation.\n */\nexport interface AnalyzeActionsResult {\n  /**\n   * Array of the results for each categorized entities recognition action.\n   */\n  recognizeEntitiesResults: RecognizeCategorizedEntitiesActionResult[];\n  /**\n   * Array of the results for each Pii entities recognition action.\n   */\n  recognizePiiEntitiesResults: RecognizePiiEntitiesActionResult[];\n  /**\n   * Array of the results for each key phrases extraction action.\n   */\n  extractKeyPhrasesResults: ExtractKeyPhrasesActionResult[];\n  /**\n   * Array of the results for each linked entities recognition action.\n   */\n  recognizeLinkedEntitiesResults: RecognizeLinkedEntitiesActionResult[];\n  /**\n   * Array of the results for each analyze sentiment action.\n   */\n  analyzeSentimentResults: AnalyzeSentimentActionResult[];\n  /**\n   * Array of the results for each extract summary action.\n   */\n  extractSummaryResults: ExtractSummaryActionResult[];\n  /**\n   * Array of the results for each recognize custom entities action.\n   */\n  recognizeCustomEntitiesResults: RecognizeCustomEntitiesActionResult[];\n  /**\n   * Array of the results for each custom classify document single category action.\n   */\n  singleCategoryClassifyResults: SingleCategoryClassifyActionResult[];\n  /**\n   * Array of the results for each custom classify document multi category action.\n   */\n  multiCategoryClassifyResults: MultiCategoryClassifyActionResult[];\n}\n\n/**\n * The state of an action\n */\nexport interface TextAnalyticsActionState {\n  /**\n   * The name of the action.\n   */\n  actionName?: string;\n}\n\n/**\n * The state of a succeeded action.\n */\nexport interface TextAnalyticsActionSuccessState extends TextAnalyticsActionState {\n  /**\n   * When this action was completed by the service.\n   */\n  readonly completedOn: Date;\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * The error of an analyze batch action.\n */\nexport interface TextAnalyticsActionErrorResult extends TextAnalyticsActionState {\n  /**\n   * When this action was completed by the service.\n   */\n  readonly failedOn: Date;\n  /**\n   * The Error for this action result.\n   */\n  readonly error: TextAnalyticsError;\n}\n\n/**\n * The error of a recognize categorized entities action.\n */\nexport type RecognizeCategorizedEntitiesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded recognize categorized entities action.\n */\nexport interface RecognizeCategorizedEntitiesActionSuccessResult\n  extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each categorized entities recognition action.\n   */\n  results: RecognizeCategorizedEntitiesResultArray;\n}\n\n/**\n * The result of a recognize categorized entities action.\n */\nexport type RecognizeCategorizedEntitiesActionResult =\n  | RecognizeCategorizedEntitiesActionSuccessResult\n  | RecognizeCategorizedEntitiesActionErrorResult;\n\n/**\n * The error of a recognize pii entities action.\n */\nexport type RecognizePiiEntitiesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded recognize pii entities action.\n */\nexport interface RecognizePiiEntitiesActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each pii entities recognition action.\n   */\n  results: RecognizePiiEntitiesResultArray;\n}\n\n/**\n * The result of a recognize pii entities action.\n */\nexport type RecognizePiiEntitiesActionResult =\n  | RecognizePiiEntitiesActionSuccessResult\n  | RecognizePiiEntitiesActionErrorResult;\n\n/**\n * The error of a extract key phrases action.\n */\nexport type ExtractKeyPhrasesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded extract key phrases action.\n */\nexport interface ExtractKeyPhrasesActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each extract key phrases action.\n   */\n  results: ExtractKeyPhrasesResultArray;\n}\n\n/**\n * The result of a extract key phrases action.\n */\nexport type ExtractKeyPhrasesActionResult =\n  | ExtractKeyPhrasesActionSuccessResult\n  | ExtractKeyPhrasesActionErrorResult;\n\n/**\n * The error of a recognize linked entities action.\n */\nexport type RecognizeLinkedEntitiesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded recognize linked entities action.\n */\nexport interface RecognizeLinkedEntitiesActionSuccessResult\n  extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each linked entities recognition action.\n   */\n  results: RecognizeLinkedEntitiesResultArray;\n}\n\n/**\n * The result of a recognize linked entities action.\n */\nexport type RecognizeLinkedEntitiesActionResult =\n  | RecognizeLinkedEntitiesActionSuccessResult\n  | RecognizeLinkedEntitiesActionErrorResult;\n\n/**\n * The error of an analyze sentiment action.\n */\nexport type AnalyzeSentimentActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded analyze sentiment action.\n */\nexport interface AnalyzeSentimentActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each analyze sentiment action.\n   */\n  results: AnalyzeSentimentResultArray;\n}\n\n/**\n * The result of an analyze sentiment action.\n */\nexport type AnalyzeSentimentActionResult =\n  | AnalyzeSentimentActionSuccessResult\n  | AnalyzeSentimentActionErrorResult;\n\n/**\n * The error of an extract summary action.\n */\nexport type ExtractSummaryActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded extract summary action.\n */\nexport interface ExtractSummaryActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each extract summary action.\n   */\n  results: ExtractSummaryResultArray;\n}\n\n/**\n * The result of an extract summary action.\n */\nexport type ExtractSummaryActionResult =\n  | ExtractSummaryActionSuccessResult\n  | ExtractSummaryActionErrorResult;\n\n/**\n * The error of a custom recognize entities action.\n */\nexport type RecongizeCustomEntitiesActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded custom recognize entities action.\n */\nexport interface RecongizeCustomEntitiesActionSuccessResult\n  extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each custom recognize entities action.\n   */\n  results: RecognizeCustomEntitiesResultArray;\n}\n\n/**\n * The result of a custom recognize entities action.\n */\nexport type RecognizeCustomEntitiesActionResult =\n  | RecongizeCustomEntitiesActionSuccessResult\n  | RecongizeCustomEntitiesActionErrorResult;\n\n/**\n * The error of a custom classify document single category action.\n */\nexport type SingleCategoryClassifyActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded custom classify document single category action.\n */\nexport interface SingleCategoryClassifyActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each custom classify document single category action.\n   */\n  results: SingleCategoryClassifyResultArray;\n}\n\n/**\n * The result of a custom classify document single category action.\n */\nexport type SingleCategoryClassifyActionResult =\n  | SingleCategoryClassifyActionSuccessResult\n  | SingleCategoryClassifyActionErrorResult;\n\n/**\n * The error of a custom classify document multi category action.\n */\nexport type MultiCategoryClassifyActionErrorResult = TextAnalyticsActionErrorResult;\n\n/**\n * The results of a succeeded custom classify document multi category action.\n */\nexport interface MultiCategoryClassifyActionSuccessResult extends TextAnalyticsActionSuccessState {\n  /**\n   * Array of the results for each custom classify document multi category action.\n   */\n  results: MultiCategoryClassifyResultArray;\n}\n\n/**\n * The result of a custom classify document multi category action.\n */\nexport type MultiCategoryClassifyActionResult =\n  | MultiCategoryClassifyActionSuccessResult\n  | MultiCategoryClassifyActionErrorResult;\n\n/**\n * The results of an analyze Actions operation represented as a paged iterator that\n * iterates over the results of the requested actions.\n */\nexport type PagedAsyncIterableAnalyzeActionsResult = PagedAsyncIterableIterator<\n  AnalyzeActionsResult,\n  AnalyzeActionsResult\n>;\n\n/**\n * The results of an analyze actions operation represented as a paged iterator that\n * iterates over the results of the requested actions.\n */\nexport interface PagedAnalyzeActionsResult extends PagedAsyncIterableAnalyzeActionsResult {\n  // /**\n  //  * Statistics about the input document batch and how it was processed\n  //  * by the service. This property will have a value when includeStatistics is set to true\n  //  * in the client call.\n  //  */\n  // statistics?: TextDocumentBatchStatistics;\n}\n\n/**\n * The type of different actions supported by the begin analyze actions operation.\n * @internal\n */\ntype TextAnalyticsActionType =\n  | \"RecognizeCategorizedEntities\"\n  | \"RecognizePiiEntities\"\n  | \"ExtractKeyPhrases\"\n  | \"RecognizeLinkedEntities\"\n  | \"AnalyzeSentiment\"\n  | \"ExtractSummary\"\n  | \"RecognizeCustomEntities\"\n  | \"SingleCategoryClassify\"\n  | \"MultiCategoryClassify\";\n\n/**\n * The type of an action error with the type of the action that erred and its\n * index in the list of input actions.\n * @internal\n */\ninterface TextAnalyticsActionError {\n  /**\n   * A code describing the kind of error produced\n   */\n  readonly code: ErrorCode;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The type of the action that erred\n   */\n  readonly type: TextAnalyticsActionType;\n  /**\n   * The index of the action that erred in the list of input actions\n   */\n  readonly index: number;\n}\n\n/**\n * Converts the service task name (in the JSON pointer in an action error) to an action type name.\n * @param serviceActionType - The task type name the service uses.\n * @returns the action type name that the package uses\n * @internal\n */\nfunction convertTaskTypeToActionType(taskType: string): TextAnalyticsActionType {\n  switch (taskType) {\n    case \"entityRecognitionTasks\": {\n      return \"RecognizeCategorizedEntities\";\n    }\n    case \"entityRecognitionPiiTasks\": {\n      return \"RecognizePiiEntities\";\n    }\n    case \"keyPhraseExtractionTasks\": {\n      return \"ExtractKeyPhrases\";\n    }\n    case \"entityLinkingTasks\": {\n      return \"RecognizeLinkedEntities\";\n    }\n    case \"sentimentAnalysisTasks\": {\n      return \"AnalyzeSentiment\";\n    }\n    case \"extractiveSummarizationTasks\": {\n      return \"ExtractSummary\";\n    }\n    case \"customEntityRecognitionTasks\": {\n      return \"RecognizeCustomEntities\";\n    }\n    case \"customSingleClassificationTasks\": {\n      return \"SingleCategoryClassify\";\n    }\n    case \"customMultiClassificationTasks\": {\n      return \"MultiCategoryClassify\";\n    }\n    default: {\n      throw new Error(`unexpected action type from the service: ${taskType}`);\n    }\n  }\n}\n\n/**\n * Converts a service action error to one with the JSON pointer converted to an action index.\n * @param erredActions - the action error the service sent\n * @returns an action error with an action type and index\n * @internal\n */\nexport function parseActionError(erredActions: TextAnalyticsError): TextAnalyticsActionError {\n  if (erredActions.target) {\n    const regex = new RegExp(\n      /#\\/tasks\\/(entityRecognitionTasks|entityRecognitionPiiTasks|keyPhraseExtractionTasks|entityLinkingTasks|sentimentAnalysisTasks|extractiveSummarizationTasks|customEntityRecognitionTasks|customSingleClassificationTasks|customMultiClassificationTasks)\\/(\\d+)/\n    );\n    const result = regex.exec(erredActions.target);\n    if (result !== null) {\n      return {\n        code: erredActions.code,\n        message: erredActions.message,\n        index: parseInt(result[2]),\n        type: convertTaskTypeToActionType(result[1])\n      };\n    } else {\n      throw new Error(`Pointer \"${erredActions.target}\" is not a valid action pointer`);\n    }\n  } else {\n    throw new Error(\n      \"expected an error with a target field referencing an action but did not get one\"\n    );\n  }\n}\n\n/**\n * Categorize each action error into a bucket according to its action type.\n * @param erredActions - list of action errors\n * @param recognizeEntitiesActionErrors - a list of recognize entities action errors to be filled from the errors list\n * @param recognizePiiEntitiesActionErrors - a list of recognize pii entities action errors to be filled from the errors list\n * @param extractKeyPhrasesActionErrors - a list of extract key phrases action errors to be filled from the errors list\n * @internal\n */\nfunction categorizeActionErrors(\n  erredActions: TextAnalyticsError[],\n  recognizeEntitiesActionErrors: TextAnalyticsActionError[],\n  recognizePiiEntitiesActionErrors: TextAnalyticsActionError[],\n  extractKeyPhrasesActionErrors: TextAnalyticsActionError[],\n  recognizeLinkedEntitiesActionErrors: TextAnalyticsActionError[],\n  analyzeSentimentActionErrors: TextAnalyticsActionError[],\n  extractSummarySentencesActionErrors: TextAnalyticsActionError[],\n  recognizeCustomEntitiesActionErrors: TextAnalyticsActionError[],\n  singleCategoryClassifyActionErrors: TextAnalyticsActionError[],\n  multiCategoryClassifyActionErrors: TextAnalyticsActionError[]\n): void {\n  for (const error of erredActions) {\n    const actionError = parseActionError(error);\n    switch (actionError.type) {\n      case \"RecognizeCategorizedEntities\": {\n        recognizeEntitiesActionErrors.push(actionError);\n        break;\n      }\n      case \"RecognizePiiEntities\": {\n        recognizePiiEntitiesActionErrors.push(actionError);\n        break;\n      }\n      case \"ExtractKeyPhrases\": {\n        extractKeyPhrasesActionErrors.push(actionError);\n        break;\n      }\n      case \"RecognizeLinkedEntities\": {\n        recognizeLinkedEntitiesActionErrors.push(actionError);\n        break;\n      }\n      case \"AnalyzeSentiment\": {\n        analyzeSentimentActionErrors.push(actionError);\n        break;\n      }\n      case \"ExtractSummary\": {\n        extractSummarySentencesActionErrors.push(actionError);\n        break;\n      }\n      case \"RecognizeCustomEntities\": {\n        recognizeCustomEntitiesActionErrors.push(actionError);\n        break;\n      }\n      case \"SingleCategoryClassify\": {\n        singleCategoryClassifyActionErrors.push(actionError);\n        break;\n      }\n      case \"MultiCategoryClassify\": {\n        multiCategoryClassifyActionErrors.push(actionError);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @internal\n * @param error - the error the service sent for a task\n * @param lastUpdateDateTime - the time when this task failed\n */\nfunction createErredAction(\n  error: TextAnalyticsActionError,\n  lastUpdateDateTime: Date,\n  taskName?: string\n): TextAnalyticsActionErrorResult {\n  return {\n    error: intoTextAnalyticsError(error),\n    failedOn: lastUpdateDateTime,\n    actionName: taskName\n  };\n}\n\ninterface TaskSuccessResult<T> {\n  results?: T;\n  taskName?: string;\n  lastUpdateDateTime: Date;\n}\n\ntype ActionResult<TSuccess> =\n  | {\n      results: TSuccess;\n      completedOn: Date;\n    }\n  | TextAnalyticsActionErrorResult;\n\n/**\n * Creates a list of results for any action.\n * @param documents - list of input documents\n * @param makeResultsArray - a function to convert the results of a service response to the SDK's one\n * @param succeededTasks - list of succeeded action results\n * @param erredActions - list of erred actions\n * @internal\n */\nfunction makeActionResult<TTaskResult, TActionResult>(\n  documents: TextDocumentInput[],\n  makeResultsArray: (docs: TextDocumentInput[], x: TTaskResult) => TActionResult,\n  succeededTasks: TaskSuccessResult<TTaskResult>[],\n  erredActions: TextAnalyticsActionError[]\n): ActionResult<TActionResult>[] {\n  let errorIndex = 0;\n  function convertTasksToActions(\n    actions: ActionResult<TActionResult>[],\n    task: TaskSuccessResult<TTaskResult>\n  ): ActionResult<TActionResult>[] {\n    const { results: actionResults, lastUpdateDateTime, taskName } = task;\n    if (actionResults !== undefined) {\n      const recognizeEntitiesResults = makeResultsArray(documents, actionResults);\n      return [\n        ...actions,\n        {\n          results: recognizeEntitiesResults,\n          completedOn: lastUpdateDateTime,\n          actionName: taskName\n        }\n      ];\n    } else {\n      return [\n        ...actions,\n        createErredAction(erredActions[errorIndex++], lastUpdateDateTime, taskName)\n      ];\n    }\n  }\n  return succeededTasks.reduce(convertTasksToActions, []);\n}\n\n/**\n * Creates the user-friendly action results object for the begin analyze actions operation.\n * @param response - the begin analyze actions operation response\n * @param documents - the list of input documents\n * @returns - the user-friendly action results object\n * @internal\n */\nexport function createAnalyzeActionsResult(\n  response: GeneratedResponse,\n  documents: TextDocumentInput[]\n): AnalyzeActionsResult {\n  const recognizeEntitiesActionErrors: TextAnalyticsActionError[] = [];\n  const recognizePiiEntitiesActionErrors: TextAnalyticsActionError[] = [];\n  const extractKeyPhrasesActionErrors: TextAnalyticsActionError[] = [];\n  const recognizeLinkedEntitiesActionErrors: TextAnalyticsActionError[] = [];\n  const analyzeSentimentActionErrors: TextAnalyticsActionError[] = [];\n  const extractSummarySentencesActionErrors: TextAnalyticsActionError[] = [];\n  const recognizeCustomEntitiesActionErrors: TextAnalyticsActionError[] = [];\n  const singleCategoryClassifyActionErrors: TextAnalyticsActionError[] = [];\n  const multiCategoryClassifyActionErrors: TextAnalyticsActionError[] = [];\n  categorizeActionErrors(\n    response?.errors ?? [],\n    recognizeEntitiesActionErrors,\n    recognizePiiEntitiesActionErrors,\n    extractKeyPhrasesActionErrors,\n    recognizeLinkedEntitiesActionErrors,\n    analyzeSentimentActionErrors,\n    extractSummarySentencesActionErrors,\n    recognizeCustomEntitiesActionErrors,\n    singleCategoryClassifyActionErrors,\n    multiCategoryClassifyActionErrors\n  );\n  return {\n    recognizeEntitiesResults: makeActionResult(\n      documents,\n      makeRecognizeCategorizedEntitiesResultArray,\n      response.tasks.entityRecognitionTasks ?? [],\n      recognizeEntitiesActionErrors\n    ),\n    recognizePiiEntitiesResults: makeActionResult(\n      documents,\n      makeRecognizePiiEntitiesResultArray,\n      response.tasks.entityRecognitionPiiTasks ?? [],\n      recognizePiiEntitiesActionErrors\n    ),\n    extractKeyPhrasesResults: makeActionResult(\n      documents,\n      makeExtractKeyPhrasesResultArray,\n      response.tasks.keyPhraseExtractionTasks ?? [],\n      extractKeyPhrasesActionErrors\n    ),\n    recognizeLinkedEntitiesResults: makeActionResult(\n      documents,\n      makeRecognizeLinkedEntitiesResultArray,\n      response.tasks.entityLinkingTasks ?? [],\n      recognizeLinkedEntitiesActionErrors\n    ),\n    analyzeSentimentResults: makeActionResult(\n      documents,\n      makeAnalyzeSentimentResultArray,\n      response.tasks.sentimentAnalysisTasks ?? [],\n      analyzeSentimentActionErrors\n    ),\n    extractSummaryResults: makeActionResult(\n      documents,\n      makeExtractSummaryResultArray,\n      response.tasks.extractiveSummarizationTasks ?? [],\n      extractSummarySentencesActionErrors\n    ),\n    recognizeCustomEntitiesResults: makeActionResult(\n      documents,\n      makeRecognizeCustomEntitiesResultArray,\n      response.tasks.customEntityRecognitionTasks ?? [],\n      recognizeCustomEntitiesActionErrors\n    ),\n    singleCategoryClassifyResults: makeActionResult(\n      documents,\n      makeSingleCategoryClassifyResultArray,\n      response.tasks.customSingleClassificationTasks ?? [],\n      singleCategoryClassifyActionErrors\n    ),\n    multiCategoryClassifyResults: makeActionResult(\n      documents,\n      makeMultiCategoryClassifyResultArray,\n      response.tasks.customMultiClassificationTasks ?? [],\n      multiCategoryClassifyActionErrors\n    )\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResponse, PollerLike, RawResponse } from \"@azure/core-lro\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { createSerializer, OperationOptions, OperationSpec } from \"@azure/core-client\";\nimport {\n  GeneratedClient,\n  GeneratedClientAnalyzeStatusOptionalParams,\n  GeneratedClientAnalyzeStatusResponse,\n  JobManifestTasks,\n  TextDocumentInput\n} from \"./generated\";\nimport { createSpan } from \"./tracing\";\nimport { compileError, getRawResponse, sendGetRequest } from \"./util\";\nimport * as Mappers from \"./generated/models/mappers\";\nimport {\n  accept,\n  apiVersion,\n  endpoint,\n  includeStatistics,\n  skip,\n  top\n} from \"./generated/models/parameters\";\nimport { getPagedAsyncIterator, PagedResult } from \"@azure/core-paging\";\nimport { AnalysisPollOperationState, OperationMetadata } from \"./pollerModels\";\nimport {\n  AnalyzeActionsResult,\n  createAnalyzeActionsResult,\n  PagedAnalyzeActionsResult\n} from \"./analyzeActionsResult\";\n\n/**\n * Options for the begin analyze actions operation.\n */\nexport interface BeginAnalyzeActionsOptions extends OperationOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * Result type of the Begin Analyze Actions Long-Running-Operation (LRO).\n */\nexport type AnalyzeActionsPollerLike = PollerLike<\n  AnalyzeActionsOperationState,\n  PagedAnalyzeActionsResult\n>;\n\n/**\n * The metadata for beginAnalyzeActions operations.\n */\nexport interface AnalyzeActionsOperationMetadata extends OperationMetadata {\n  /**\n   * Number of successfully completed actions.\n   */\n  actionsSucceededCount: number;\n  /**\n   * Number of failed actions.\n   */\n  actionsFailedCount: number;\n  /**\n   * Number of actions still in progress.\n   */\n  actionsInProgressCount: number;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * The state of the begin analyze polling operation.\n */\nexport interface AnalyzeActionsOperationState\n  extends AnalysisPollOperationState<PagedAnalyzeActionsResult>,\n    AnalyzeActionsOperationMetadata {}\n\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\n// Consider whether the spec can be exported by code gen\nconst analyzeStatusOperationSpec: OperationSpec = {\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeJobState\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [includeStatistics, top, skip],\n  urlParameters: [endpoint, apiVersion],\n  headerParameters: [accept],\n  serializer\n};\n\n/**\n * @internal\n */\nexport class AnalyzeLro implements LongRunningOperation<PagedAnalyzeActionsResult> {\n  public requestMethod = \"POST\";\n  public requestPath = \"/analyze\";\n  constructor(\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: GeneratedClient,\n    private baseOptions: OperationOptions,\n    private initOptions: {\n      displayName?: string;\n    },\n    private pollOptions: {\n      includeStatistics?: boolean;\n    },\n    private documents: TextDocumentInput[],\n    private tasks: JobManifestTasks\n  ) {}\n  async sendInitialRequest(): Promise<LroResponse<PagedAnalyzeActionsResult>> {\n    const { span, updatedOptions: finalOptions } = createSpan(\"TextAnalyticsClient-beginAnalyze\", {\n      ...this.baseOptions,\n      ...this.initOptions\n    });\n    try {\n      const { flatResponse, rawResponse } = await getRawResponse(\n        (paramOptions) =>\n          this.client.analyze({\n            body: {\n              analysisInput: { documents: this.documents },\n              tasks: this.tasks,\n              displayName: this.initOptions.displayName\n            },\n            ...paramOptions\n          }),\n        finalOptions\n      );\n      return {\n        flatResponse: flatResponse as PagedAnalyzeActionsResult,\n        rawResponse\n      };\n    } catch (e) {\n      const exception = compileError(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n  async sendPollRequest(path: string): Promise<LroResponse<PagedAnalyzeActionsResult>> {\n    return sendGetRequest(\n      this.client,\n      analyzeStatusOperationSpec,\n      \"AnalyzeStatus\",\n      { ...this.baseOptions, ...this.pollOptions },\n      path\n    ) as Promise<LroResponse<PagedAnalyzeActionsResult>>;\n  }\n}\n\n/**\n * @internal\n */\nexport function isAnalyzeDone(response: unknown): boolean {\n  const castResponse = response as GeneratedClientAnalyzeStatusResponse;\n  switch (castResponse.status) {\n    case \"notStarted\":\n    case \"running\":\n      return false;\n    default: {\n      return true;\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function processAnalyzeResult(\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  client: GeneratedClient,\n  documents: TextDocumentInput[],\n  options: GeneratedClientAnalyzeStatusOptionalParams\n): (result: unknown, state: AnalyzeActionsOperationState) => PagedAnalyzeActionsResult {\n  return (_result: unknown, state: AnalyzeActionsOperationState): PagedAnalyzeActionsResult => {\n    const pollingURL = (state as any).pollingURL;\n    const pagedResult: PagedResult<AnalyzeActionsResult> = {\n      firstPageLink: pollingURL,\n      getPage: async (pageLink: string, maxPageSize?: number) => {\n        const response = await sendGetRequest(\n          client,\n          analyzeStatusOperationSpec,\n          \"AnalyzeStatus\",\n          // if `top` is set to `undefined`, the default value will not be sent\n          // as part of the request.\n          maxPageSize ? { ...options, top: maxPageSize } : options,\n          pageLink\n        );\n        const flatResponse = response.flatResponse as GeneratedClientAnalyzeStatusResponse;\n        return {\n          page: createAnalyzeActionsResult(flatResponse, documents),\n          nextPageLink: flatResponse.nextLink\n        };\n      }\n    };\n    const pagedIterator = getPagedAsyncIterator<AnalyzeActionsResult, AnalyzeActionsResult>(\n      pagedResult\n    );\n    // Attach stats if the service starts to return them\n    // https://github.com/Azure/azure-sdk-for-js/issues/14139\n    // state.result = Object.assign(pagedIterator, {\n    //   statistics: operationStatus.statistics\n    // });\n    return pagedIterator;\n  };\n}\n\n/**\n * @internal\n */\nexport function updateAnalyzeState(\n  state: AnalyzeActionsOperationState,\n  lastResponse: RawResponse\n): void {\n  const response = lastResponse.body as GeneratedClientAnalyzeStatusResponse;\n  state.createdOn = response.createdDateTime;\n  state.lastModifiedOn = response.lastUpdateDateTime;\n  state.expiresOn = response.expirationDateTime;\n  state.status = response.status;\n  state.actionsSucceededCount = response.tasks.completed;\n  state.actionsFailedCount = response.tasks.failed;\n  state.actionsInProgressCount = response.tasks.inProgress;\n  state.displayName = response.displayName;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommonClientOptions } from \"@azure/core-client\";\nimport {\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy\n} from \"@azure/core-rest-pipeline\";\nimport { TokenCredential, KeyCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { logger } from \"./logger\";\nimport {\n  JobManifestTasks as GeneratedActions,\n  DetectLanguageInput,\n  GeneratedClientEntitiesRecognitionPiiOptionalParams as GeneratedRecognizePiiEntitiesOptions,\n  GeneratedClientSentimentOptionalParams as GeneratedAnalyzeSentimentOptions,\n  GeneratedClientEntitiesRecognitionGeneralOptionalParams as GeneratedRecognizeCategorizedEntitiesOptions,\n  GeneratedClientEntitiesLinkingOptionalParams as GeneratedRecognizeLinkedEntitiesOptions,\n  GeneratedClientKeyPhrasesOptionalParams as GeneratedExtractKeyPhrasesOptions,\n  GeneratedClientLanguagesOptionalParams as GeneratedDetectLanguageOptions,\n  TextDocumentInput,\n  PiiCategory\n} from \"./generated/models\";\nimport {\n  DetectLanguageResultArray,\n  makeDetectLanguageResultArray\n} from \"./detectLanguageResultArray\";\nimport {\n  RecognizeCategorizedEntitiesResultArray,\n  makeRecognizeCategorizedEntitiesResultArray\n} from \"./recognizeCategorizedEntitiesResultArray\";\nimport {\n  AnalyzeSentimentResultArray,\n  makeAnalyzeSentimentResultArray\n} from \"./analyzeSentimentResultArray\";\nimport {\n  makeExtractKeyPhrasesResultArray,\n  ExtractKeyPhrasesResultArray\n} from \"./extractKeyPhrasesResultArray\";\nimport {\n  RecognizePiiEntitiesResultArray,\n  makeRecognizePiiEntitiesResultArray\n} from \"./recognizePiiEntitiesResultArray\";\nimport {\n  RecognizeLinkedEntitiesResultArray,\n  makeRecognizeLinkedEntitiesResultArray\n} from \"./recognizeLinkedEntitiesResultArray\";\nimport { createSpan } from \"./tracing\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { textAnalyticsAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\nimport {\n  addParamsToTask,\n  compose,\n  compileError,\n  setCategoriesFilter,\n  setOpinionMining,\n  setOrderBy,\n  setSentenceCount,\n  setStrEncodingParam,\n  setStrEncodingParamValue,\n  StringIndexType\n} from \"./util\";\nimport { TextAnalyticsOperationOptions } from \"./textAnalyticsOperationOptions\";\nimport { AnalysisPollOperationState, OperationMetadata } from \"./pollerModels\";\nimport { CustomTextAnalyticsAction, TextAnalyticsAction } from \"./textAnalyticsAction\";\nimport {\n  AnalyzeHealthcareEntitiesPollerLike,\n  AnalyzeHealthcareOperationState,\n  BeginAnalyzeHealthcareEntitiesOptions,\n  HealthLro,\n  isHealthDone,\n  processHealthResult,\n  updateHealthState\n} from \"./healthLro\";\nimport { LroEngine } from \"@azure/core-lro\";\nimport { PagedAnalyzeHealthcareEntitiesResult } from \"./analyzeHealthcareEntitiesResult\";\nimport {\n  AnalyzeActionsOperationMetadata,\n  AnalyzeActionsOperationState,\n  AnalyzeActionsPollerLike,\n  AnalyzeLro,\n  BeginAnalyzeActionsOptions,\n  isAnalyzeDone,\n  processAnalyzeResult,\n  updateAnalyzeState\n} from \"./analyzeLro\";\nimport { PagedAnalyzeActionsResult } from \"./analyzeActionsResult\";\n\nexport {\n  BeginAnalyzeActionsOptions,\n  AnalyzeActionsPollerLike,\n  AnalyzeActionsOperationState,\n  BeginAnalyzeHealthcareEntitiesOptions,\n  AnalyzeHealthcareEntitiesPollerLike,\n  AnalyzeHealthcareOperationState,\n  AnalysisPollOperationState,\n  OperationMetadata,\n  AnalyzeActionsOperationMetadata,\n  StringIndexType\n};\n\nconst DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\n/**\n * Client options used to configure TextAnalytics API requests.\n */\nexport interface TextAnalyticsClientOptions extends CommonClientOptions {\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  defaultCountryHint?: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  defaultLanguage?: string;\n}\n\n/**\n * Options for the detect languages operation.\n */\nexport interface DetectLanguageOptions extends TextAnalyticsOperationOptions {}\n\n/**\n * Options for the recognize entities operation.\n */\nexport interface RecognizeCategorizedEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * Options for the analyze sentiment operation.\n */\nexport interface AnalyzeSentimentOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Whether to mine the opinions of a sentence and conduct more  granular\n   * analysis around the aspects of a product or service (also known as\n   * aspect-based sentiment analysis). If set to true, the returned\n   * `SentenceSentiment` objects will have property `opinions` containing\n   * the result of this analysis.\n   * More information about the feature can be found here: {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis?tabs=version-3-1#opinion-mining}\n   */\n  includeOpinionMining?: boolean;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * The types of PII domains the user can choose from.\n */\nexport enum PiiEntityDomain {\n  /**\n   * @see {@link https://aka.ms/tanerpii} for more information.\n   */\n  PROTECTED_HEALTH_INFORMATION = \"PHI\"\n}\n\n/**\n * Options for the recognize PII entities operation.\n */\nexport interface RecognizePiiEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). @see {@link https://aka.ms/tanerpii} for more information.\n   */\n  domainFilter?: PiiEntityDomain;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * Filters entities to ones only included in the specified array of categories\n   */\n  categoriesFilter?: PiiCategory[];\n}\n\n/**\n * Options for the extract key phrases operation.\n */\nexport interface ExtractKeyPhrasesOptions extends TextAnalyticsOperationOptions {}\n\n/**\n * Options for the recognize linked entities operation.\n */\nexport interface RecognizeLinkedEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * Options for an entities recognition action.\n */\nexport interface RecognizeCategorizedEntitiesAction extends TextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for a Pii entities recognition action.\n */\nexport interface RecognizePiiEntitiesAction extends TextAnalyticsAction {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if\n   * set to 'PHI', entities in the Protected Healthcare Information domain will\n   * only be returned). @see {@link https://aka.ms/tanerpii} for more information.\n   */\n  domainFilter?: PiiEntityDomain;\n  /**\n   * Filters entities to ones only included in the specified array of categories\n   */\n  categoriesFilter?: PiiCategory[];\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to false, you opt-in to have your text input logged for troubleshooting. By default, Text Analytics\n   * will not log your input text for pii entities recognition. Setting this parameter to false,\n   * enables input logging.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for a key phrases recognition action.\n */\nexport interface ExtractKeyPhrasesAction extends TextAnalyticsAction {\n  /**\n   * If set to false, you opt-in to have your text input logged for troubleshooting. By default, Text Analytics\n   * will not log your input text for pii entities recognition. Setting this parameter to false,\n   * enables input logging.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for an entities linking action.\n */\nexport interface RecognizeLinkedEntitiesAction extends TextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for an analyze sentiment action.\n */\nexport interface AnalyzeSentimentAction extends TextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n  /**\n   * Whether to mine the opinions of a sentence and conduct more  granular\n   * analysis around the aspects of a product or service (also known as\n   * aspect-based sentiment analysis). If set to true, the returned\n   * `SentenceSentiment` objects will have property `opinions` containing\n   * the result of this analysis.\n   * More information about the feature can be found here: {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis?tabs=version-3-1#opinion-mining}\n   */\n  includeOpinionMining?: boolean;\n}\n\n/**\n * A type representing how to sort sentences for the summarization extraction action.\n */\nexport type KnownSummarySentencesSortBy = \"Offset\" | \"Rank\";\n\n/**\n * Options for an extract summary action.\n */\nexport interface ExtractSummaryAction extends TextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n  /**\n   * Specifies the number of summary sentences to return. The default number of sentences is 3.\n   */\n  maxSentenceCount?: number;\n  /**\n   * Specifies how to sort the returned sentences. Please refer to {@link KnownSummarySentencesOrderBy} for possible values.\n   */\n  orderBy?: string;\n}\n\n/**\n * Options for a custom recognize entities action. For more information, please refer\n * to the service documentation: {@link https://aka.ms/azsdk/textanalytics/customentityrecognition}\n */\nexport interface RecognizeCustomEntitiesAction extends CustomTextAnalyticsAction {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties.\n   * Possible units are \"TextElements_v8\", \"UnicodeCodePoint\", and \"Utf16CodeUnit\".\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for an custom classify document single category action. For more information, please refer\n * to the service documentation: {@link https://aka.ms/azsdk/textanalytics/customfunctionalities}\n */\nexport interface SingleCategoryClassifyAction extends CustomTextAnalyticsAction {\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Options for a custom classify document multi categories action. For more information, please refer\n * to the service documentation: {@link https://aka.ms/azsdk/textanalytics/customfunctionalities}\n */\nexport interface MultiCategoryClassifyAction extends CustomTextAnalyticsAction {\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics\n   * logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true,\n   * disables input logging and may limit our ability to remediate issues that occur.\n   */\n  disableServiceLogs?: boolean;\n}\n\n/**\n * Description of collection of actions for the analyze API to perform on input documents.\n */\nexport interface TextAnalyticsActions {\n  /**\n   * A collection of descriptions of entities recognition actions.\n   */\n  recognizeEntitiesActions?: RecognizeCategorizedEntitiesAction[];\n  /**\n   * A collection of descriptions of Pii entities recognition actions.\n   */\n  recognizePiiEntitiesActions?: RecognizePiiEntitiesAction[];\n  /**\n   * A collection of descriptions of key phrases recognition actions.\n   */\n  extractKeyPhrasesActions?: ExtractKeyPhrasesAction[];\n  /**\n   * A collection of descriptions of entities linking actions.\n   */\n  recognizeLinkedEntitiesActions?: RecognizeLinkedEntitiesAction[];\n  /**\n   * A collection of descriptions of sentiment analysis actions.\n   */\n  analyzeSentimentActions?: AnalyzeSentimentAction[];\n  /**\n   * A collection of descriptions of summarization extraction actions.\n   */\n  extractSummaryActions?: ExtractSummaryAction[];\n  /**\n   * A collection of descriptions of custom entity recognition actions. For more information, please refer\n   * to the service documentation: {@link https://aka.ms/azsdk/textanalytics/customentityrecognition}\n   */\n  recognizeCustomEntitiesActions?: RecognizeCustomEntitiesAction[];\n  /**\n   * A collection of descriptions of custom single classification actions. For more information, please refer\n   * to the service documentation: {@link https://aka.ms/azsdk/textanalytics/customfunctionalities}\n   */\n  singleCategoryClassifyActions?: SingleCategoryClassifyAction[];\n  /**\n   * A collection of descriptions of custom multi classification actions. For more information, please refer\n   * to the service documentation: {@link https://aka.ms/azsdk/textanalytics/customfunctionalities}\n   */\n  multiCategoryClassifyActions?: MultiCategoryClassifyAction[];\n}\n/**\n * Client class for interacting with Azure Text Analytics.\n */\nexport class TextAnalyticsClient {\n  /**\n   * The URL to the TextAnalytics endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  public defaultCountryHint: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  public defaultLanguage: string;\n\n  /**\n   * @internal\n   * A reference to the auto-generated TextAnalytics HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of TextAnalyticsClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { TextAnalyticsClient, AzureKeyCredential } from \"@azure/ai-text-analytics\";\n   *\n   * const client = new TextAnalyticsClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param endpointUrl - The URL to the TextAnalytics endpoint\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the TextAnalytics client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: TextAnalyticsClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    const { defaultCountryHint = \"us\", defaultLanguage = \"en\", ...pipelineOptions } = options;\n    this.defaultCountryHint = defaultCountryHint;\n    this.defaultLanguage = defaultLanguage;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          additionalAllowedHeaderNames: [\"x-ms-correlation-request-id\", \"x-ms-request-id\"]\n        }\n      }\n    };\n\n    this.client = new GeneratedClient(this.endpointUrl, internalPipelineOptions);\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy({ credential, scopes: DEFAULT_COGNITIVE_SCOPE })\n      : textAnalyticsAzureKeyCredentialPolicy(credential);\n\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input strings are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents - A collection of input strings to analyze.\n   * @param countryHint - Indicates the country of origin for all of\n   *   the input strings to assist the text analytics model in predicting\n   *   the language they are written in.  If unspecified, this value will be\n   *   set to the default country hint in `TextAnalyticsClientOptions`.\n   *   If set to an empty string, or the string \"none\", the service will apply a\n   *   model where the country is explicitly unset.\n   *   The same country hint is applied to all strings in the input collection.\n   * @param options - Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: string[],\n    countryHint?: string,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input document are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents - A collection of input documents to analyze.\n   * @param options - Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: DetectLanguageInput[],\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  public async detectLanguage(\n    documents: string[] | DetectLanguageInput[],\n    countryHintOrOptions?: string | DetectLanguageOptions,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray> {\n    let realOptions: DetectLanguageOptions;\n    let realInputs: DetectLanguageInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const countryHint = (countryHintOrOptions as string) || this.defaultCountryHint;\n      realInputs = convertToDetectLanguageInput(documents, countryHint);\n      realOptions = options || {};\n    } else {\n      // Replace \"none\" hints with \"\"\n      realInputs = documents.map((input) => ({\n        ...input,\n        countryHint: input.countryHint === \"none\" ? \"\" : input.countryHint\n      }));\n      realOptions = (countryHintOrOptions as DetectLanguageOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-detectLanguages\",\n      makeGeneratedDetectLanguageOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.languages(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeDetectLanguageResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input strings, and categorize those entities into types\n   * such as person, location, or organization.  For more information on \n   * available categories, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types}.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: string[],\n    language?: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input documents, and categorize those entities into types\n   * such as person, location, or organization.  For more information on\n   * available categories, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types}.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: TextDocumentInput[],\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  public async recognizeEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeCategorizedEntitiesOptions,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray> {\n    let realOptions: RecognizeCategorizedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeCategorizedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeEntities\",\n      makeGeneratedRecognizeCategorizedEntitiesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionGeneral(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeRecognizeCategorizedEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      /**\n       * This special logic handles REST exception with code\n       * InvalidDocumentBatch and is needed to maintain backward compatability\n       * with sdk v5.0.0 and earlier. In general, REST exceptions are thrown as\n       * is and include both outer and inner exception codes. However, the\n       * earlier versions were throwing an exception that included the inner\n       * code only.\n       */\n      const backwardCompatibleException = compileError(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: backwardCompatibleException.message\n      });\n      throw backwardCompatibleException;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify the positive, negative, neutral, or mixed\n   * sentiment contained in the input strings, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments. Optionally it\n   * can also identify targets in the text and assessments about it through\n   * opinion mining. For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options - Optional parameters that includes enabling opinion mining.\n   */\n  public async analyzeSentiment(\n    documents: string[],\n    language?: string,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  /**\n   * Runs a predictive model to identify the positive, negative or neutral, or mixed\n   * sentiment contained in the input documents, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.Optionally it\n   * can also identify targets in the text and assessments about it through\n   * opinion mining. For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Optional parameters that includes enabling opinion mining.\n   */\n  public async analyzeSentiment(\n    documents: TextDocumentInput[],\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  public async analyzeSentiment(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | AnalyzeSentimentOptions,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray> {\n    let realOptions: AnalyzeSentimentOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as AnalyzeSentimentOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-analyzeSentiment\",\n      makeGeneratedAnalyzeSentimentOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.sentiment(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeAnalyzeSentimentResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input strings.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: string[],\n    language?: string,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input documents.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Options for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: TextDocumentInput[],\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  public async extractKeyPhrases(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | ExtractKeyPhrasesOptions,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray> {\n    let realOptions: ExtractKeyPhrasesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as ExtractKeyPhrasesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-extractKeyPhrases\",\n      makeGeneratedExtractKeyPhrasesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.keyPhrases(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeExtractKeyPhrasesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input strings,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support}.\n   * @param inputs - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: string[],\n    language?: string,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities containing\n   * personally identifiable information found in the passed-in input documents,\n   * and categorize those entities into types such as US social security\n   * number, drivers license number, or credit card number.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support}.\n   * @param inputs - The input documents to analyze.\n   * @param options - Optional parameters for the operation.\n   */\n  public async recognizePiiEntities(\n    inputs: TextDocumentInput[],\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray>;\n  public async recognizePiiEntities(\n    inputs: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizePiiEntitiesOptions,\n    options?: RecognizePiiEntitiesOptions\n  ): Promise<RecognizePiiEntitiesResultArray> {\n    let realOptions: RecognizePiiEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (isStringArray(inputs)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(inputs, language);\n      realOptions = options || {};\n    } else {\n      realInputs = inputs;\n      realOptions = (languageOrOptions as RecognizePiiEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizePiiEntities\",\n      makeGeneratedRecognizePiiEntitiesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionPii(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeRecognizePiiEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input strings, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input strings to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: string[],\n    language?: string,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input documents, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, @see\n   * {@link https://docs.microsoft.com/azure/cognitive-services/text-analytics/language-support}.\n   * @param documents - The input documents to analyze.\n   * @param options - Options for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: TextDocumentInput[],\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  public async recognizeLinkedEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeLinkedEntitiesOptions,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray> {\n    let realOptions: RecognizeLinkedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeLinkedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeLinkedEntities\",\n      makeGeneratedRecognizeLinkingEntitiesOptions(realOptions)\n    );\n\n    try {\n      const result = await this.client.entitiesLinking(\n        {\n          documents: realInputs\n        },\n        finalOptions\n      );\n\n      return makeRecognizeLinkedEntitiesResultArray(realInputs, result);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Start a healthcare analysis operation to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents - Collection of documents to analyze.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  async beginAnalyzeHealthcareEntities(\n    documents: string[],\n    language?: string,\n    options?: BeginAnalyzeHealthcareEntitiesOptions\n  ): Promise<AnalyzeHealthcareEntitiesPollerLike>;\n  /**\n   * Start a healthcare analysis operation to recognize healthcare related entities (drugs, conditions,\n   * symptoms, etc) and their relations.\n   * @param documents - Collection of documents to analyze.\n   * @param options - Options for the operation.\n   */\n  async beginAnalyzeHealthcareEntities(\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeHealthcareEntitiesOptions\n  ): Promise<AnalyzeHealthcareEntitiesPollerLike>;\n\n  async beginAnalyzeHealthcareEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | BeginAnalyzeHealthcareEntitiesOptions,\n    options?: BeginAnalyzeHealthcareEntitiesOptions\n  ): Promise<AnalyzeHealthcareEntitiesPollerLike> {\n    let realOptions: BeginAnalyzeHealthcareEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeHealthcareEntitiesOptions) || {};\n    }\n\n    const {\n      updateIntervalInMs,\n      resumeFrom,\n      onResponse,\n      disableServiceLogs,\n      modelVersion,\n      requestOptions,\n      serializerOptions,\n      abortSignal,\n      stringIndexType,\n      includeStatistics,\n      tracingOptions\n    } = realOptions;\n    const lro = new HealthLro(\n      this.client,\n      {\n        onResponse,\n        requestOptions,\n        serializerOptions,\n        abortSignal,\n        tracingOptions\n      },\n      { loggingOptOut: disableServiceLogs, stringIndexType, modelVersion },\n      { includeStatistics },\n      realInputs\n    );\n\n    const poller = new LroEngine<\n      PagedAnalyzeHealthcareEntitiesResult,\n      AnalyzeHealthcareOperationState\n    >(lro, {\n      intervalInMs: updateIntervalInMs,\n      resumeFrom: resumeFrom,\n      processResult: processHealthResult(this.client, realInputs, {\n        onResponse,\n        requestOptions,\n        serializerOptions,\n        abortSignal,\n        tracingOptions,\n        includeStatistics\n      }),\n      isDone: isHealthDone,\n      updateState: updateHealthState\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique actions to be executed.\n   * @param documents - Collection of documents to analyze\n   * @param actions - TextAnalyticsActions to execute.\n   * @param language - The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.\n        If set to an empty string, the service will apply a model\n        where the language is explicitly set to \"None\".\n   * @param options - Options for the operation.\n   */\n  public async beginAnalyzeActions(\n    documents: string[],\n    actions: TextAnalyticsActions,\n    language?: string,\n    options?: BeginAnalyzeActionsOptions\n  ): Promise<AnalyzeActionsPollerLike>;\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique actions to be executed.\n   * @param documents - Collection of documents to analyze\n   * @param actions - TextAnalyticsActions to execute.\n   * @param options - Options for the operation.\n   */\n  public async beginAnalyzeActions(\n    documents: TextDocumentInput[],\n    actions: TextAnalyticsActions,\n    options?: BeginAnalyzeActionsOptions\n  ): Promise<AnalyzeActionsPollerLike>;\n  public async beginAnalyzeActions(\n    documents: string[] | TextDocumentInput[],\n    actions: TextAnalyticsActions,\n    languageOrOptions?: string | BeginAnalyzeActionsOptions,\n    options?: BeginAnalyzeActionsOptions\n  ): Promise<AnalyzeActionsPollerLike> {\n    let realOptions: BeginAnalyzeActionsOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as BeginAnalyzeActionsOptions) || {};\n    }\n    const compiledActions = compileAnalyzeInput(actions);\n    const {\n      updateIntervalInMs,\n      resumeFrom,\n      displayName,\n      includeStatistics,\n      onResponse,\n      requestOptions,\n      serializerOptions,\n      abortSignal,\n      tracingOptions\n    } = realOptions;\n    const lro = new AnalyzeLro(\n      this.client,\n      {\n        onResponse,\n        requestOptions,\n        serializerOptions,\n        abortSignal,\n        tracingOptions\n      },\n      { displayName },\n      { includeStatistics },\n      realInputs,\n      compiledActions\n    );\n\n    const poller = new LroEngine<PagedAnalyzeActionsResult, AnalyzeActionsOperationState>(lro, {\n      intervalInMs: updateIntervalInMs,\n      resumeFrom: resumeFrom,\n      processResult: processAnalyzeResult(this.client, realInputs, {\n        onResponse,\n        requestOptions,\n        serializerOptions,\n        abortSignal,\n        tracingOptions,\n        includeStatistics\n      }),\n      isDone: isAnalyzeDone,\n      updateState: updateAnalyzeState\n    });\n\n    await poller.poll();\n    return poller;\n  }\n}\n\n/**\n * @internal\n */\nfunction compileAnalyzeInput(actions: TextAnalyticsActions): GeneratedActions {\n  return {\n    entityRecognitionPiiTasks: actions.recognizePiiEntitiesActions?.map(\n      compose(setStrEncodingParam, compose(setCategoriesFilter, addParamsToTask))\n    ),\n    entityRecognitionTasks: actions.recognizeEntitiesActions?.map(\n      compose(setStrEncodingParam, addParamsToTask)\n    ),\n    keyPhraseExtractionTasks: actions.extractKeyPhrasesActions?.map(addParamsToTask),\n    entityLinkingTasks: actions.recognizeLinkedEntitiesActions?.map(\n      compose(setStrEncodingParam, addParamsToTask)\n    ),\n    sentimentAnalysisTasks: actions.analyzeSentimentActions?.map(\n      compose(setStrEncodingParam, compose(setOpinionMining, addParamsToTask))\n    ),\n    extractiveSummarizationTasks: actions.extractSummaryActions?.map(\n      compose(setStrEncodingParam, compose(setSentenceCount, compose(setOrderBy, addParamsToTask)))\n    ),\n    customEntityRecognitionTasks: actions.recognizeCustomEntitiesActions?.map(\n      compose(setStrEncodingParam, addParamsToTask)\n    ),\n    customSingleClassificationTasks: actions.singleCategoryClassifyActions?.map(addParamsToTask),\n    customMultiClassificationTasks: actions.multiCategoryClassifyActions?.map(addParamsToTask)\n  };\n}\n\nfunction isStringArray(documents: any[]): documents is string[] {\n  return typeof documents[0] === \"string\";\n}\n\n/**\n * @internal\n */\nfunction convertToDetectLanguageInput(\n  inputs: string[],\n  countryHint: string\n): DetectLanguageInput[] {\n  if (countryHint === \"none\") {\n    countryHint = \"\";\n  }\n  return inputs.map(\n    (text: string, index): DetectLanguageInput => {\n      return {\n        id: String(index),\n        countryHint,\n        text\n      };\n    }\n  );\n}\n\n/**\n * @internal\n */\nfunction convertToTextDocumentInput(inputs: string[], language: string): TextDocumentInput[] {\n  return inputs.map(\n    (text: string, index): TextDocumentInput => {\n      return {\n        id: String(index),\n        language,\n        text\n      };\n    }\n  );\n}\n\n/**\n * Creates the options the service expects for the analyze sentiment API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedAnalyzeSentimentOptions(\n  params: AnalyzeSentimentOptions\n): GeneratedAnalyzeSentimentOptions {\n  return {\n    abortSignal: params.abortSignal,\n    opinionMining: params.includeOpinionMining,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType),\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the recognize pii entities API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedRecognizePiiEntitiesOptions(\n  params: RecognizePiiEntitiesOptions\n): GeneratedRecognizePiiEntitiesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    domain: params.domainFilter,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType),\n    tracingOptions: params.tracingOptions,\n    piiCategories: params.categoriesFilter,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the recognize entities API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedRecognizeCategorizedEntitiesOptions(\n  params: RecognizeCategorizedEntitiesOptions\n): GeneratedRecognizeCategorizedEntitiesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType),\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the detect language API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedDetectLanguageOptions(\n  params: DetectLanguageOptions\n): GeneratedDetectLanguageOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the extract key phrases API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedExtractKeyPhrasesOptions(\n  params: ExtractKeyPhrasesOptions\n): GeneratedExtractKeyPhrasesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs\n  };\n}\n\n/**\n * Creates the options the service expects for the recognize linked entities API from the user friendly ones.\n * @param params - the user friendly parameters\n * @internal\n */\nfunction makeGeneratedRecognizeLinkingEntitiesOptions(\n  params: RecognizeLinkedEntitiesOptions\n): GeneratedRecognizeLinkedEntitiesOptions {\n  return {\n    abortSignal: params.abortSignal,\n    includeStatistics: params.includeStatistics,\n    modelVersion: params.modelVersion,\n    requestOptions: params.requestOptions,\n    tracingOptions: params.tracingOptions,\n    onResponse: params.onResponse,\n    serializerOptions: params.serializerOptions,\n    loggingOptOut: params.disableServiceLogs,\n    stringIndexType: setStrEncodingParamValue(params.stringIndexType)\n  };\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport interface JobDescriptor {\n  /** Optional display name for the analysis job. */\n  displayName?: string;\n}\n\nexport interface AnalysisInput {\n  /** Contains a set of input documents to be analyzed by the service. */\n  analysisInput: MultiLanguageBatchInput;\n}\n\n/** Contains a set of input documents to be analyzed by the service. */\nexport interface MultiLanguageBatchInput {\n  /** The set of documents to process as part of this batch. */\n  documents: TextDocumentInput[];\n}\n\n/** An object representing an individual text document to be analyzed by the Text Analytics service. The document contains a unique document ID, the full text of the document, and the language of the document's text. */\nexport interface TextDocumentInput {\n  /** A unique, non-empty document identifier. */\n  id: string;\n  /** The input text to process. */\n  text: string;\n  /** (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default. */\n  language?: string;\n}\n\nexport interface JobManifest {\n  /** The set of tasks to execute on the input documents. Cannot specify the same task more than once. */\n  tasks: JobManifestTasks;\n}\n\n/** The set of tasks to execute on the input documents. Cannot specify the same task more than once. */\nexport interface JobManifestTasks {\n  entityRecognitionTasks?: EntitiesTask[];\n  entityRecognitionPiiTasks?: PiiTask[];\n  keyPhraseExtractionTasks?: KeyPhrasesTask[];\n  entityLinkingTasks?: EntityLinkingTask[];\n  sentimentAnalysisTasks?: SentimentAnalysisTask[];\n  extractiveSummarizationTasks?: ExtractiveSummarizationTask[];\n  customEntityRecognitionTasks?: CustomEntitiesTask[];\n  customSingleClassificationTasks?: CustomSingleClassificationTask[];\n  customMultiClassificationTasks?: CustomMultiClassificationTask[];\n}\n\nexport interface EntitiesTask {\n  parameters?: EntitiesTaskParameters;\n  taskName?: string;\n}\n\nexport interface EntitiesTaskParameters {\n  modelVersion?: string;\n  loggingOptOut?: boolean;\n  stringIndexType?: StringIndexType;\n}\n\nexport interface PiiTask {\n  parameters?: PiiTaskParameters;\n  taskName?: string;\n}\n\nexport interface PiiTaskParameters {\n  domain?: PiiTaskParametersDomain;\n  modelVersion?: string;\n  loggingOptOut?: boolean;\n  /** (Optional) describes the PII categories to return */\n  piiCategories?: PiiCategory[];\n  stringIndexType?: StringIndexType;\n}\n\nexport interface KeyPhrasesTask {\n  parameters?: KeyPhrasesTaskParameters;\n  taskName?: string;\n}\n\nexport interface KeyPhrasesTaskParameters {\n  modelVersion?: string;\n  loggingOptOut?: boolean;\n}\n\nexport interface EntityLinkingTask {\n  parameters?: EntityLinkingTaskParameters;\n  taskName?: string;\n}\n\nexport interface EntityLinkingTaskParameters {\n  modelVersion?: string;\n  loggingOptOut?: boolean;\n  stringIndexType?: StringIndexType;\n}\n\nexport interface SentimentAnalysisTask {\n  parameters?: SentimentAnalysisTaskParameters;\n  taskName?: string;\n}\n\nexport interface SentimentAnalysisTaskParameters {\n  modelVersion?: string;\n  loggingOptOut?: boolean;\n  opinionMining?: boolean;\n  stringIndexType?: StringIndexType;\n}\n\nexport interface ExtractiveSummarizationTask {\n  parameters?: ExtractiveSummarizationTaskParameters;\n  taskName?: string;\n}\n\nexport interface ExtractiveSummarizationTaskParameters {\n  modelVersion?: string;\n  loggingOptOut?: boolean;\n  stringIndexType?: StringIndexType;\n  sentenceCount?: number;\n  sortBy?: ExtractiveSummarizationTaskParametersSortBy;\n}\n\nexport interface CustomEntitiesTask {\n  parameters?: CustomEntitiesTaskParameters;\n  taskName?: string;\n}\n\nexport interface CustomEntitiesTaskParameters {\n  projectName: string;\n  deploymentName: string;\n  loggingOptOut?: boolean;\n  stringIndexType?: StringIndexType;\n}\n\nexport interface CustomSingleClassificationTask {\n  parameters?: CustomSingleClassificationTaskParameters;\n  taskName?: string;\n}\n\nexport interface CustomSingleClassificationTaskParameters {\n  projectName: string;\n  deploymentName: string;\n  loggingOptOut?: boolean;\n}\n\nexport interface CustomMultiClassificationTask {\n  parameters?: CustomMultiClassificationTaskParameters;\n  taskName?: string;\n}\n\nexport interface CustomMultiClassificationTaskParameters {\n  projectName: string;\n  deploymentName: string;\n  loggingOptOut?: boolean;\n}\n\nexport interface ErrorResponse {\n  /** Document Error. */\n  error: TextAnalyticsError;\n}\n\nexport interface TextAnalyticsError {\n  /** Error code. */\n  code: ErrorCodeValue;\n  /** Error message. */\n  message: string;\n  /** Error target. */\n  target?: string;\n  /** Inner error contains more specific information. */\n  innererror?: InnerError;\n  /** Details about specific errors that led to this reported error. */\n  details?: TextAnalyticsError[];\n}\n\nexport interface InnerError {\n  /** Error code. */\n  code: InnerErrorCodeValue;\n  /** Error message. */\n  message: string;\n  /** Error details. */\n  details?: { [propertyName: string]: string };\n  /** Error target. */\n  target?: string;\n  /** Inner error contains more specific information. */\n  innererror?: InnerError;\n}\n\nexport interface JobMetadata {\n  createdDateTime: Date;\n  expirationDateTime?: Date;\n  jobId: string;\n  lastUpdateDateTime: Date;\n  status: State;\n}\n\nexport interface AnalyzeJobDisplayName {\n  displayName?: string;\n}\n\nexport interface TasksState {\n  tasks: TasksStateTasks;\n}\n\nexport interface TasksStateTasks {\n  completed: number;\n  failed: number;\n  inProgress: number;\n  total: number;\n  entityRecognitionTasks?: TasksStateTasksEntityRecognitionTasksItem[];\n  entityRecognitionPiiTasks?: TasksStateTasksEntityRecognitionPiiTasksItem[];\n  keyPhraseExtractionTasks?: TasksStateTasksKeyPhraseExtractionTasksItem[];\n  entityLinkingTasks?: TasksStateTasksEntityLinkingTasksItem[];\n  sentimentAnalysisTasks?: TasksStateTasksSentimentAnalysisTasksItem[];\n  extractiveSummarizationTasks?: TasksStateTasksExtractiveSummarizationTasksItem[];\n  customEntityRecognitionTasks?: TasksStateTasksCustomEntityRecognitionTasksItem[];\n  customSingleClassificationTasks?: TasksStateTasksCustomSingleClassificationTasksItem[];\n  customMultiClassificationTasks?: TasksStateTasksCustomMultiClassificationTasksItem[];\n}\n\nexport interface TaskState {\n  lastUpdateDateTime: Date;\n  taskName: string;\n  status: State;\n}\n\nexport interface EntitiesTaskResult {\n  results?: EntitiesResult;\n}\n\nexport interface EntitiesResult {\n  /** Response by document */\n  documents: DocumentEntities[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface DocumentEntities {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Recognized entities in the document. */\n  entities: Entity[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\n/** A word or phrase identified as an entity that is categorized within a taxonomy of types. The set of categories recognized by the Text Analytics service is described at https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/named-entity-types . */\nexport interface Entity {\n  /** Entity text as appears in the request. */\n  text: string;\n  /** Entity type. */\n  category: string;\n  /** (Optional) Entity sub type. */\n  subCategory?: string;\n  /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */\n  offset: number;\n  /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */\n  length: number;\n  /** Confidence score between 0 and 1 of the extracted entity. */\n  confidenceScore: number;\n}\n\n/** Represents a warning encountered while processing a document. */\nexport interface TextAnalyticsWarning {\n  /** Error code. */\n  code: WarningCode;\n  /** Warning message. */\n  message: string;\n}\n\n/** if includeStatistics=true was specified in the request this field will contain information about the document payload. */\nexport interface TextDocumentStatistics {\n  /** Number of text elements recognized in the document. */\n  characterCount: number;\n  /** Number of transactions for the document. */\n  transactionCount: number;\n}\n\nexport interface DocumentError {\n  /** Document Id. */\n  id: string;\n  /** Document Error. */\n  error: TextAnalyticsError;\n}\n\n/** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\nexport interface TextDocumentBatchStatistics {\n  /** Number of documents submitted in the request. */\n  documentCount: number;\n  /** Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. */\n  validDocumentCount: number;\n  /** Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. */\n  erroneousDocumentCount: number;\n  /** Number of transactions for the request. */\n  transactionCount: number;\n}\n\nexport interface PiiTaskResult {\n  results?: PiiResult;\n}\n\nexport interface PiiResult {\n  /** Response by document */\n  documents: PiiDocumentEntities[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface PiiDocumentEntities {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Returns redacted text. */\n  redactedText: string;\n  /** Recognized entities in the document. */\n  entities: Entity[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\nexport interface KeyPhraseTaskResult {\n  results?: KeyPhraseResult;\n}\n\nexport interface KeyPhraseResult {\n  /** Response by document */\n  documents: DocumentKeyPhrases[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface DocumentKeyPhrases {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document. */\n  keyPhrases: string[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\nexport interface EntityLinkingTaskResult {\n  results?: EntityLinkingResult;\n}\n\nexport interface EntityLinkingResult {\n  /** Response by document */\n  documents: DocumentLinkedEntities[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface DocumentLinkedEntities {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Recognized well known entities in the document. */\n  entities: LinkedEntity[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\n/** A word or phrase identified as a well-known entity within a database, including its formal (disambiguated) name and a link to the entity information within the source database. */\nexport interface LinkedEntity {\n  /** Entity Linking formal name. */\n  name: string;\n  /** List of instances this entity appears in the text. */\n  matches: Match[];\n  /** Language used in the data source. */\n  language: string;\n  /** Unique identifier of the recognized entity from the data source. */\n  dataSourceEntityId?: string;\n  /** URL for the entity's page from the data source. */\n  url: string;\n  /** Data source used to extract entity linking, such as Wiki/Bing etc. */\n  dataSource: string;\n  /** Bing Entity Search API unique identifier of the recognized entity. */\n  bingEntitySearchApiId?: string;\n}\n\n/** Details about the specific substring in a document that refers to a linked entity identified by the Text Analytics model. */\nexport interface Match {\n  /** If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned. */\n  confidenceScore: number;\n  /** Entity text as appears in the request. */\n  text: string;\n  /** Start position for the entity match text. */\n  offset: number;\n  /** Length for the entity match text. */\n  length: number;\n}\n\nexport interface SentimentTaskResult {\n  results?: SentimentResponse;\n}\n\nexport interface SentimentResponse {\n  /** Sentiment analysis per document. */\n  documents: DocumentSentiment[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface DocumentSentiment {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). */\n  sentiment: DocumentSentimentLabel;\n  /** if includeStatistics=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n  /** Document level sentiment confidence scores between 0 and 1 for each sentiment class. */\n  confidenceScores: SentimentConfidenceScores;\n  /** Sentence level sentiment analysis. */\n  sentenceSentiments: SentenceSentiment[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n}\n\n/** Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative. */\nexport interface SentimentConfidenceScores {\n  positive: number;\n  neutral: number;\n  negative: number;\n}\n\n/** The predicted sentiment for a given span of text. For more information regarding text sentiment, see https://docs.microsoft.com/azure/cognitive-services/Text-Analytics/how-tos/text-analytics-how-to-sentiment-analysis. */\nexport interface SentenceSentiment {\n  /** The sentence text. */\n  text: string;\n  /** The predicted Sentiment for the sentence. */\n  sentiment: SentenceSentimentLabel;\n  /** The sentiment confidence score between 0 and 1 for the sentence for all classes. */\n  confidenceScores: SentimentConfidenceScores;\n  /** The sentence offset from the start of the document. */\n  offset: number;\n  /** The length of the sentence. */\n  length: number;\n  /** The array of sentence targets for the sentence. */\n  targets?: SentenceTarget[];\n  /** The array of assessments for the sentence. */\n  assessments?: SentenceAssessment[];\n}\n\nexport interface SentenceTarget {\n  /** Targeted sentiment in the sentence. */\n  sentiment: TokenSentimentValue;\n  /** Target sentiment confidence scores for the target in the sentence. */\n  confidenceScores: TargetConfidenceScoreLabel;\n  /** The target offset from the start of the sentence. */\n  offset: number;\n  /** The length of the target. */\n  length: number;\n  /** The target text detected. */\n  text: string;\n  /** The array of either assessment or target objects which is related to the target. */\n  relations: TargetRelation[];\n}\n\n/** Represents the confidence scores across all sentiment classes: positive, neutral, negative. */\nexport interface TargetConfidenceScoreLabel {\n  positive: number;\n  negative: number;\n}\n\nexport interface TargetRelation {\n  /** The type related to the target. */\n  relationType: TargetRelationType;\n  /** The JSON pointer indicating the linked object. */\n  ref: string;\n}\n\nexport interface SentenceAssessment {\n  /** Assessment sentiment in the sentence. */\n  sentiment: TokenSentimentValue;\n  /** Assessment sentiment confidence scores in the sentence. */\n  confidenceScores: TargetConfidenceScoreLabel;\n  /** The assessment offset from the start of the sentence. */\n  offset: number;\n  /** The length of the assessment. */\n  length: number;\n  /** The assessment text detected. */\n  text: string;\n  /** The indicator representing if the assessment is negated. */\n  isNegated: boolean;\n}\n\nexport interface ExtractiveSummarizationTaskResult {\n  results?: ExtractiveSummarizationResult;\n}\n\nexport interface ExtractiveSummarizationResult {\n  /** Response by document */\n  documents: ExtractedDocumentSummary[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface ExtractedDocumentSummary {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** A ranked list of sentences representing the extracted summary. */\n  sentences: ExtractedSummarySentence[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\nexport interface ExtractedSummarySentence {\n  /** The extracted sentence text. */\n  text: string;\n  /** A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance. */\n  rankScore: number;\n  /** The sentence offset from the start of the document, based on the value of the parameter StringIndexType. */\n  offset: number;\n  /** The length of the sentence. */\n  length: number;\n}\n\nexport interface CustomEntitiesTaskResult {\n  results?: CustomEntitiesResult;\n}\n\nexport interface CustomEntitiesResult {\n  /** Response by document */\n  documents: DocumentEntities[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates the project name for the model. */\n  projectName: string;\n  /** This field indicates the deployment name for the model. */\n  deploymentName: string;\n}\n\nexport interface CustomSingleClassificationTaskResult {\n  results?: CustomSingleClassificationResult;\n}\n\nexport interface CustomSingleClassificationResult {\n  /** Response by document */\n  documents: SingleClassificationDocument[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates the project name for the model. */\n  projectName: string;\n  /** This field indicates the deployment name for the model. */\n  deploymentName: string;\n}\n\nexport interface SingleClassificationDocument {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  classification: ClassificationResult;\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\nexport interface ClassificationResult {\n  /** Classification type. */\n  category: string;\n  /** Confidence score between 0 and 1 of the recognized classification. */\n  confidenceScore: number;\n}\n\nexport interface CustomMultiClassificationTaskResult {\n  results?: CustomMultiClassificationResult;\n}\n\nexport interface CustomMultiClassificationResult {\n  /** Response by document */\n  documents: MultiClassificationDocument[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates the project name for the model. */\n  projectName: string;\n  /** This field indicates the deployment name for the model. */\n  deploymentName: string;\n}\n\nexport interface MultiClassificationDocument {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Recognized classification results in the document. */\n  classifications: ClassificationResult[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\nexport interface AnalyzeJobErrorsAndStatistics {\n  errors?: TextAnalyticsError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n}\n\nexport interface Pagination {\n  nextLink?: string;\n}\n\nexport interface HealthcareTaskResult {\n  results?: HealthcareResult;\n  errors?: TextAnalyticsError[];\n}\n\nexport interface HealthcareResult {\n  /** Response by document */\n  documents: DocumentHealthcareEntities[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface DocumentHealthcareEntities {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Healthcare entities. */\n  entities: HealthcareEntity[];\n  /** Healthcare entity relations. */\n  relations: HealthcareRelation[];\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\nexport interface HealthcareEntityProperties {\n  /** Entity text as appears in the request. */\n  text: string;\n  /** Healthcare Entity Category. */\n  category: HealthcareEntityCategory;\n  /** (Optional) Entity sub type. */\n  subcategory?: string;\n  /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */\n  offset: number;\n  /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */\n  length: number;\n  /** Confidence score between 0 and 1 of the extracted entity. */\n  confidenceScore: number;\n}\n\nexport interface HealthcareLinkingProperties {\n  assertion?: HealthcareAssertion;\n  /** Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'. */\n  name?: string;\n  /** Entity references in known data sources. */\n  links?: HealthcareEntityLink[];\n}\n\nexport interface HealthcareAssertion {\n  /** Describes any conditionality on the entity. */\n  conditionality?: Conditionality;\n  /** Describes the entities certainty and polarity. */\n  certainty?: Certainty;\n  /** Describes if the entity is the subject of the text or if it describes someone else. */\n  association?: Association;\n}\n\nexport interface HealthcareEntityLink {\n  /** Entity Catalog. Examples include: UMLS, CHV, MSH, etc. */\n  dataSource: string;\n  /** Entity id in the given source catalog. */\n  id: string;\n}\n\n/** Every relation is an entity graph of a certain relationType, where all entities are connected and have specific roles within the relation context. */\nexport interface HealthcareRelation {\n  /** Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc. */\n  relationType: RelationType;\n  /** The entities in the relation. */\n  entities: HealthcareRelationEntity[];\n}\n\nexport interface HealthcareRelationEntity {\n  /** Reference link object, using a JSON pointer RFC 6901 (URI Fragment Identifier Representation), pointing to the entity . */\n  ref: string;\n  /** Role of entity in the relationship. For example: 'CD20-positive diffuse large B-cell lymphoma' has the following entities with their roles in parenthesis:  CD20 (GeneOrProtein), Positive (Expression), diffuse large B-cell lymphoma (Diagnosis). */\n  role: string;\n}\n\nexport interface LanguageBatchInput {\n  documents: DetectLanguageInput[];\n}\n\n/** An input to the language detection operation. This object specifies a unique document id, as well as the full text of a document and a hint indicating the document's country of origin to assist the text analytics predictive model in detecting the document's language. */\nexport interface DetectLanguageInput {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  text: string;\n  countryHint?: string;\n}\n\nexport interface LanguageResult {\n  /** Response by document */\n  documents: DocumentLanguage[];\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\nexport interface DocumentLanguage {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Detected Language. */\n  detectedLanguage: DetectedLanguage;\n  /** Warnings encountered while processing document. */\n  warnings: TextAnalyticsWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\n/** Information about the language of a document as identified by the Text Analytics service. */\nexport interface DetectedLanguage {\n  /** Long name of a detected language (e.g. English, French). */\n  name: string;\n  /** A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr). */\n  iso6391Name: string;\n  /** A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. */\n  confidenceScore: number;\n}\n\nexport type AnalyzeBatchInput = JobDescriptor &\n  AnalysisInput &\n  JobManifest & {};\n\nexport type AnalyzeJobMetadata = JobMetadata & AnalyzeJobDisplayName & {};\n\nexport type HealthcareJobState = JobMetadata &\n  HealthcareTaskResult &\n  Pagination & {};\n\nexport type AnalyzeJobState = AnalyzeJobMetadata &\n  TasksState &\n  AnalyzeJobErrorsAndStatistics &\n  Pagination & {};\n\nexport type TasksStateTasksEntityRecognitionTasksItem = TaskState &\n  EntitiesTaskResult & {};\n\nexport type TasksStateTasksEntityRecognitionPiiTasksItem = TaskState &\n  PiiTaskResult & {};\n\nexport type TasksStateTasksKeyPhraseExtractionTasksItem = TaskState &\n  KeyPhraseTaskResult & {};\n\nexport type TasksStateTasksEntityLinkingTasksItem = TaskState &\n  EntityLinkingTaskResult & {};\n\nexport type TasksStateTasksSentimentAnalysisTasksItem = TaskState &\n  SentimentTaskResult & {};\n\nexport type TasksStateTasksExtractiveSummarizationTasksItem = TaskState &\n  ExtractiveSummarizationTaskResult & {};\n\nexport type TasksStateTasksCustomEntityRecognitionTasksItem = TaskState &\n  CustomEntitiesTaskResult & {};\n\nexport type TasksStateTasksCustomSingleClassificationTasksItem = TaskState &\n  CustomSingleClassificationTaskResult & {};\n\nexport type TasksStateTasksCustomMultiClassificationTasksItem = TaskState &\n  CustomMultiClassificationTaskResult & {};\n\nexport type HealthcareEntity = HealthcareEntityProperties &\n  HealthcareLinkingProperties & {};\n\n/** Defines headers for GeneratedClient_analyze operation. */\nexport interface GeneratedClientAnalyzeHeaders {\n  operationLocation?: string;\n}\n\n/** Defines headers for GeneratedClient_cancelHealthJob operation. */\nexport interface GeneratedClientCancelHealthJobHeaders {\n  operationLocation?: string;\n}\n\n/** Defines headers for GeneratedClient_health operation. */\nexport interface GeneratedClientHealthHeaders {\n  operationLocation?: string;\n}\n\n/** Known values of {@link StringIndexType} that the service accepts. */\nexport enum KnownStringIndexType {\n  /** Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. */\n  TextElementV8 = \"TextElement_v8\",\n  /** Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. */\n  UnicodeCodePoint = \"UnicodeCodePoint\",\n  /** Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript. */\n  Utf16CodeUnit = \"Utf16CodeUnit\"\n}\n\n/**\n * Defines values for StringIndexType. \\\n * {@link KnownStringIndexType} can be used interchangeably with StringIndexType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **TextElement_v8**: Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. \\\n * **UnicodeCodePoint**: Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. \\\n * **Utf16CodeUnit**: Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript.\n */\nexport type StringIndexType = string;\n\n/** Known values of {@link PiiTaskParametersDomain} that the service accepts. */\nexport enum KnownPiiTaskParametersDomain {\n  Phi = \"phi\",\n  None = \"none\"\n}\n\n/**\n * Defines values for PiiTaskParametersDomain. \\\n * {@link KnownPiiTaskParametersDomain} can be used interchangeably with PiiTaskParametersDomain,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **phi** \\\n * **none**\n */\nexport type PiiTaskParametersDomain = string;\n\n/** Known values of {@link PiiCategory} that the service accepts. */\nexport enum KnownPiiCategory {\n  ABARoutingNumber = \"ABARoutingNumber\",\n  ARNationalIdentityNumber = \"ARNationalIdentityNumber\",\n  AUBankAccountNumber = \"AUBankAccountNumber\",\n  AUDriversLicenseNumber = \"AUDriversLicenseNumber\",\n  AUMedicalAccountNumber = \"AUMedicalAccountNumber\",\n  AUPassportNumber = \"AUPassportNumber\",\n  AUTaxFileNumber = \"AUTaxFileNumber\",\n  AUBusinessNumber = \"AUBusinessNumber\",\n  AUCompanyNumber = \"AUCompanyNumber\",\n  ATIdentityCard = \"ATIdentityCard\",\n  ATTaxIdentificationNumber = \"ATTaxIdentificationNumber\",\n  ATValueAddedTaxNumber = \"ATValueAddedTaxNumber\",\n  AzureDocumentDBAuthKey = \"AzureDocumentDBAuthKey\",\n  AzureIaasDatabaseConnectionAndSQLString = \"AzureIAASDatabaseConnectionAndSQLString\",\n  AzureIoTConnectionString = \"AzureIoTConnectionString\",\n  AzurePublishSettingPassword = \"AzurePublishSettingPassword\",\n  AzureRedisCacheString = \"AzureRedisCacheString\",\n  AzureSAS = \"AzureSAS\",\n  AzureServiceBusString = \"AzureServiceBusString\",\n  AzureStorageAccountKey = \"AzureStorageAccountKey\",\n  AzureStorageAccountGeneric = \"AzureStorageAccountGeneric\",\n  BENationalNumber = \"BENationalNumber\",\n  BENationalNumberV2 = \"BENationalNumberV2\",\n  BEValueAddedTaxNumber = \"BEValueAddedTaxNumber\",\n  BrcpfNumber = \"BRCPFNumber\",\n  BRLegalEntityNumber = \"BRLegalEntityNumber\",\n  BRNationalIdrg = \"BRNationalIDRG\",\n  BGUniformCivilNumber = \"BGUniformCivilNumber\",\n  CABankAccountNumber = \"CABankAccountNumber\",\n  CADriversLicenseNumber = \"CADriversLicenseNumber\",\n  CAHealthServiceNumber = \"CAHealthServiceNumber\",\n  CAPassportNumber = \"CAPassportNumber\",\n  CAPersonalHealthIdentification = \"CAPersonalHealthIdentification\",\n  CASocialInsuranceNumber = \"CASocialInsuranceNumber\",\n  CLIdentityCardNumber = \"CLIdentityCardNumber\",\n  CNResidentIdentityCardNumber = \"CNResidentIdentityCardNumber\",\n  CreditCardNumber = \"CreditCardNumber\",\n  HRIdentityCardNumber = \"HRIdentityCardNumber\",\n  HRNationalIDNumber = \"HRNationalIDNumber\",\n  HRPersonalIdentificationNumber = \"HRPersonalIdentificationNumber\",\n  HRPersonalIdentificationOIBNumberV2 = \"HRPersonalIdentificationOIBNumberV2\",\n  CYIdentityCard = \"CYIdentityCard\",\n  CYTaxIdentificationNumber = \"CYTaxIdentificationNumber\",\n  CZPersonalIdentityNumber = \"CZPersonalIdentityNumber\",\n  CZPersonalIdentityV2 = \"CZPersonalIdentityV2\",\n  DKPersonalIdentificationNumber = \"DKPersonalIdentificationNumber\",\n  DKPersonalIdentificationV2 = \"DKPersonalIdentificationV2\",\n  DrugEnforcementAgencyNumber = \"DrugEnforcementAgencyNumber\",\n  EEPersonalIdentificationCode = \"EEPersonalIdentificationCode\",\n  EUDebitCardNumber = \"EUDebitCardNumber\",\n  EUDriversLicenseNumber = \"EUDriversLicenseNumber\",\n  EugpsCoordinates = \"EUGPSCoordinates\",\n  EUNationalIdentificationNumber = \"EUNationalIdentificationNumber\",\n  EUPassportNumber = \"EUPassportNumber\",\n  EUSocialSecurityNumber = \"EUSocialSecurityNumber\",\n  EUTaxIdentificationNumber = \"EUTaxIdentificationNumber\",\n  FIEuropeanHealthNumber = \"FIEuropeanHealthNumber\",\n  FINationalID = \"FINationalID\",\n  FINationalIDV2 = \"FINationalIDV2\",\n  FIPassportNumber = \"FIPassportNumber\",\n  FRDriversLicenseNumber = \"FRDriversLicenseNumber\",\n  FRHealthInsuranceNumber = \"FRHealthInsuranceNumber\",\n  FRNationalID = \"FRNationalID\",\n  FRPassportNumber = \"FRPassportNumber\",\n  FRSocialSecurityNumber = \"FRSocialSecurityNumber\",\n  FRTaxIdentificationNumber = \"FRTaxIdentificationNumber\",\n  FRValueAddedTaxNumber = \"FRValueAddedTaxNumber\",\n  DEDriversLicenseNumber = \"DEDriversLicenseNumber\",\n  DEPassportNumber = \"DEPassportNumber\",\n  DEIdentityCardNumber = \"DEIdentityCardNumber\",\n  DETaxIdentificationNumber = \"DETaxIdentificationNumber\",\n  DEValueAddedNumber = \"DEValueAddedNumber\",\n  GRNationalIDCard = \"GRNationalIDCard\",\n  GRNationalIDV2 = \"GRNationalIDV2\",\n  GRTaxIdentificationNumber = \"GRTaxIdentificationNumber\",\n  HKIdentityCardNumber = \"HKIdentityCardNumber\",\n  HUValueAddedNumber = \"HUValueAddedNumber\",\n  HUPersonalIdentificationNumber = \"HUPersonalIdentificationNumber\",\n  HUTaxIdentificationNumber = \"HUTaxIdentificationNumber\",\n  INPermanentAccount = \"INPermanentAccount\",\n  INUniqueIdentificationNumber = \"INUniqueIdentificationNumber\",\n  IDIdentityCardNumber = \"IDIdentityCardNumber\",\n  InternationalBankingAccountNumber = \"InternationalBankingAccountNumber\",\n  IEPersonalPublicServiceNumber = \"IEPersonalPublicServiceNumber\",\n  IEPersonalPublicServiceNumberV2 = \"IEPersonalPublicServiceNumberV2\",\n  ILBankAccountNumber = \"ILBankAccountNumber\",\n  ILNationalID = \"ILNationalID\",\n  ITDriversLicenseNumber = \"ITDriversLicenseNumber\",\n  ITFiscalCode = \"ITFiscalCode\",\n  ITValueAddedTaxNumber = \"ITValueAddedTaxNumber\",\n  JPBankAccountNumber = \"JPBankAccountNumber\",\n  JPDriversLicenseNumber = \"JPDriversLicenseNumber\",\n  JPPassportNumber = \"JPPassportNumber\",\n  JPResidentRegistrationNumber = \"JPResidentRegistrationNumber\",\n  JPSocialInsuranceNumber = \"JPSocialInsuranceNumber\",\n  JPMyNumberCorporate = \"JPMyNumberCorporate\",\n  JPMyNumberPersonal = \"JPMyNumberPersonal\",\n  JPResidenceCardNumber = \"JPResidenceCardNumber\",\n  LVPersonalCode = \"LVPersonalCode\",\n  LTPersonalCode = \"LTPersonalCode\",\n  LUNationalIdentificationNumberNatural = \"LUNationalIdentificationNumberNatural\",\n  LUNationalIdentificationNumberNonNatural = \"LUNationalIdentificationNumberNonNatural\",\n  MYIdentityCardNumber = \"MYIdentityCardNumber\",\n  MTIdentityCardNumber = \"MTIdentityCardNumber\",\n  MTTaxIDNumber = \"MTTaxIDNumber\",\n  NLCitizensServiceNumber = \"NLCitizensServiceNumber\",\n  NLCitizensServiceNumberV2 = \"NLCitizensServiceNumberV2\",\n  NLTaxIdentificationNumber = \"NLTaxIdentificationNumber\",\n  NLValueAddedTaxNumber = \"NLValueAddedTaxNumber\",\n  NZBankAccountNumber = \"NZBankAccountNumber\",\n  NZDriversLicenseNumber = \"NZDriversLicenseNumber\",\n  NZInlandRevenueNumber = \"NZInlandRevenueNumber\",\n  NZMinistryOfHealthNumber = \"NZMinistryOfHealthNumber\",\n  NZSocialWelfareNumber = \"NZSocialWelfareNumber\",\n  NOIdentityNumber = \"NOIdentityNumber\",\n  PHUnifiedMultiPurposeIDNumber = \"PHUnifiedMultiPurposeIDNumber\",\n  PLIdentityCard = \"PLIdentityCard\",\n  PLNationalID = \"PLNationalID\",\n  PLNationalIDV2 = \"PLNationalIDV2\",\n  PLPassportNumber = \"PLPassportNumber\",\n  PLTaxIdentificationNumber = \"PLTaxIdentificationNumber\",\n  PlregonNumber = \"PLREGONNumber\",\n  PTCitizenCardNumber = \"PTCitizenCardNumber\",\n  PTCitizenCardNumberV2 = \"PTCitizenCardNumberV2\",\n  PTTaxIdentificationNumber = \"PTTaxIdentificationNumber\",\n  ROPersonalNumericalCode = \"ROPersonalNumericalCode\",\n  RUPassportNumberDomestic = \"RUPassportNumberDomestic\",\n  RUPassportNumberInternational = \"RUPassportNumberInternational\",\n  SANationalID = \"SANationalID\",\n  SGNationalRegistrationIdentityCardNumber = \"SGNationalRegistrationIdentityCardNumber\",\n  SKPersonalNumber = \"SKPersonalNumber\",\n  SITaxIdentificationNumber = \"SITaxIdentificationNumber\",\n  SIUniqueMasterCitizenNumber = \"SIUniqueMasterCitizenNumber\",\n  ZAIdentificationNumber = \"ZAIdentificationNumber\",\n  KRResidentRegistrationNumber = \"KRResidentRegistrationNumber\",\n  Esdni = \"ESDNI\",\n  ESSocialSecurityNumber = \"ESSocialSecurityNumber\",\n  ESTaxIdentificationNumber = \"ESTaxIdentificationNumber\",\n  SQLServerConnectionString = \"SQLServerConnectionString\",\n  SENationalID = \"SENationalID\",\n  SENationalIDV2 = \"SENationalIDV2\",\n  SEPassportNumber = \"SEPassportNumber\",\n  SETaxIdentificationNumber = \"SETaxIdentificationNumber\",\n  SwiftCode = \"SWIFTCode\",\n  CHSocialSecurityNumber = \"CHSocialSecurityNumber\",\n  TWNationalID = \"TWNationalID\",\n  TWPassportNumber = \"TWPassportNumber\",\n  TWResidentCertificate = \"TWResidentCertificate\",\n  THPopulationIdentificationCode = \"THPopulationIdentificationCode\",\n  TRNationalIdentificationNumber = \"TRNationalIdentificationNumber\",\n  UKDriversLicenseNumber = \"UKDriversLicenseNumber\",\n  UKElectoralRollNumber = \"UKElectoralRollNumber\",\n  UKNationalHealthNumber = \"UKNationalHealthNumber\",\n  UKNationalInsuranceNumber = \"UKNationalInsuranceNumber\",\n  UKUniqueTaxpayerNumber = \"UKUniqueTaxpayerNumber\",\n  UsukPassportNumber = \"USUKPassportNumber\",\n  USBankAccountNumber = \"USBankAccountNumber\",\n  USDriversLicenseNumber = \"USDriversLicenseNumber\",\n  USIndividualTaxpayerIdentification = \"USIndividualTaxpayerIdentification\",\n  USSocialSecurityNumber = \"USSocialSecurityNumber\",\n  UAPassportNumberDomestic = \"UAPassportNumberDomestic\",\n  UAPassportNumberInternational = \"UAPassportNumberInternational\",\n  Organization = \"Organization\",\n  Email = \"Email\",\n  URL = \"URL\",\n  Age = \"Age\",\n  PhoneNumber = \"PhoneNumber\",\n  IPAddress = \"IPAddress\",\n  Date = \"Date\",\n  Person = \"Person\",\n  Address = \"Address\",\n  All = \"All\",\n  Default = \"Default\"\n}\n\n/**\n * Defines values for PiiCategory. \\\n * {@link KnownPiiCategory} can be used interchangeably with PiiCategory,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **ABARoutingNumber** \\\n * **ARNationalIdentityNumber** \\\n * **AUBankAccountNumber** \\\n * **AUDriversLicenseNumber** \\\n * **AUMedicalAccountNumber** \\\n * **AUPassportNumber** \\\n * **AUTaxFileNumber** \\\n * **AUBusinessNumber** \\\n * **AUCompanyNumber** \\\n * **ATIdentityCard** \\\n * **ATTaxIdentificationNumber** \\\n * **ATValueAddedTaxNumber** \\\n * **AzureDocumentDBAuthKey** \\\n * **AzureIAASDatabaseConnectionAndSQLString** \\\n * **AzureIoTConnectionString** \\\n * **AzurePublishSettingPassword** \\\n * **AzureRedisCacheString** \\\n * **AzureSAS** \\\n * **AzureServiceBusString** \\\n * **AzureStorageAccountKey** \\\n * **AzureStorageAccountGeneric** \\\n * **BENationalNumber** \\\n * **BENationalNumberV2** \\\n * **BEValueAddedTaxNumber** \\\n * **BRCPFNumber** \\\n * **BRLegalEntityNumber** \\\n * **BRNationalIDRG** \\\n * **BGUniformCivilNumber** \\\n * **CABankAccountNumber** \\\n * **CADriversLicenseNumber** \\\n * **CAHealthServiceNumber** \\\n * **CAPassportNumber** \\\n * **CAPersonalHealthIdentification** \\\n * **CASocialInsuranceNumber** \\\n * **CLIdentityCardNumber** \\\n * **CNResidentIdentityCardNumber** \\\n * **CreditCardNumber** \\\n * **HRIdentityCardNumber** \\\n * **HRNationalIDNumber** \\\n * **HRPersonalIdentificationNumber** \\\n * **HRPersonalIdentificationOIBNumberV2** \\\n * **CYIdentityCard** \\\n * **CYTaxIdentificationNumber** \\\n * **CZPersonalIdentityNumber** \\\n * **CZPersonalIdentityV2** \\\n * **DKPersonalIdentificationNumber** \\\n * **DKPersonalIdentificationV2** \\\n * **DrugEnforcementAgencyNumber** \\\n * **EEPersonalIdentificationCode** \\\n * **EUDebitCardNumber** \\\n * **EUDriversLicenseNumber** \\\n * **EUGPSCoordinates** \\\n * **EUNationalIdentificationNumber** \\\n * **EUPassportNumber** \\\n * **EUSocialSecurityNumber** \\\n * **EUTaxIdentificationNumber** \\\n * **FIEuropeanHealthNumber** \\\n * **FINationalID** \\\n * **FINationalIDV2** \\\n * **FIPassportNumber** \\\n * **FRDriversLicenseNumber** \\\n * **FRHealthInsuranceNumber** \\\n * **FRNationalID** \\\n * **FRPassportNumber** \\\n * **FRSocialSecurityNumber** \\\n * **FRTaxIdentificationNumber** \\\n * **FRValueAddedTaxNumber** \\\n * **DEDriversLicenseNumber** \\\n * **DEPassportNumber** \\\n * **DEIdentityCardNumber** \\\n * **DETaxIdentificationNumber** \\\n * **DEValueAddedNumber** \\\n * **GRNationalIDCard** \\\n * **GRNationalIDV2** \\\n * **GRTaxIdentificationNumber** \\\n * **HKIdentityCardNumber** \\\n * **HUValueAddedNumber** \\\n * **HUPersonalIdentificationNumber** \\\n * **HUTaxIdentificationNumber** \\\n * **INPermanentAccount** \\\n * **INUniqueIdentificationNumber** \\\n * **IDIdentityCardNumber** \\\n * **InternationalBankingAccountNumber** \\\n * **IEPersonalPublicServiceNumber** \\\n * **IEPersonalPublicServiceNumberV2** \\\n * **ILBankAccountNumber** \\\n * **ILNationalID** \\\n * **ITDriversLicenseNumber** \\\n * **ITFiscalCode** \\\n * **ITValueAddedTaxNumber** \\\n * **JPBankAccountNumber** \\\n * **JPDriversLicenseNumber** \\\n * **JPPassportNumber** \\\n * **JPResidentRegistrationNumber** \\\n * **JPSocialInsuranceNumber** \\\n * **JPMyNumberCorporate** \\\n * **JPMyNumberPersonal** \\\n * **JPResidenceCardNumber** \\\n * **LVPersonalCode** \\\n * **LTPersonalCode** \\\n * **LUNationalIdentificationNumberNatural** \\\n * **LUNationalIdentificationNumberNonNatural** \\\n * **MYIdentityCardNumber** \\\n * **MTIdentityCardNumber** \\\n * **MTTaxIDNumber** \\\n * **NLCitizensServiceNumber** \\\n * **NLCitizensServiceNumberV2** \\\n * **NLTaxIdentificationNumber** \\\n * **NLValueAddedTaxNumber** \\\n * **NZBankAccountNumber** \\\n * **NZDriversLicenseNumber** \\\n * **NZInlandRevenueNumber** \\\n * **NZMinistryOfHealthNumber** \\\n * **NZSocialWelfareNumber** \\\n * **NOIdentityNumber** \\\n * **PHUnifiedMultiPurposeIDNumber** \\\n * **PLIdentityCard** \\\n * **PLNationalID** \\\n * **PLNationalIDV2** \\\n * **PLPassportNumber** \\\n * **PLTaxIdentificationNumber** \\\n * **PLREGONNumber** \\\n * **PTCitizenCardNumber** \\\n * **PTCitizenCardNumberV2** \\\n * **PTTaxIdentificationNumber** \\\n * **ROPersonalNumericalCode** \\\n * **RUPassportNumberDomestic** \\\n * **RUPassportNumberInternational** \\\n * **SANationalID** \\\n * **SGNationalRegistrationIdentityCardNumber** \\\n * **SKPersonalNumber** \\\n * **SITaxIdentificationNumber** \\\n * **SIUniqueMasterCitizenNumber** \\\n * **ZAIdentificationNumber** \\\n * **KRResidentRegistrationNumber** \\\n * **ESDNI** \\\n * **ESSocialSecurityNumber** \\\n * **ESTaxIdentificationNumber** \\\n * **SQLServerConnectionString** \\\n * **SENationalID** \\\n * **SENationalIDV2** \\\n * **SEPassportNumber** \\\n * **SETaxIdentificationNumber** \\\n * **SWIFTCode** \\\n * **CHSocialSecurityNumber** \\\n * **TWNationalID** \\\n * **TWPassportNumber** \\\n * **TWResidentCertificate** \\\n * **THPopulationIdentificationCode** \\\n * **TRNationalIdentificationNumber** \\\n * **UKDriversLicenseNumber** \\\n * **UKElectoralRollNumber** \\\n * **UKNationalHealthNumber** \\\n * **UKNationalInsuranceNumber** \\\n * **UKUniqueTaxpayerNumber** \\\n * **USUKPassportNumber** \\\n * **USBankAccountNumber** \\\n * **USDriversLicenseNumber** \\\n * **USIndividualTaxpayerIdentification** \\\n * **USSocialSecurityNumber** \\\n * **UAPassportNumberDomestic** \\\n * **UAPassportNumberInternational** \\\n * **Organization** \\\n * **Email** \\\n * **URL** \\\n * **Age** \\\n * **PhoneNumber** \\\n * **IPAddress** \\\n * **Date** \\\n * **Person** \\\n * **Address** \\\n * **All** \\\n * **Default**\n */\nexport type PiiCategory = string;\n\n/** Known values of {@link ExtractiveSummarizationTaskParametersSortBy} that the service accepts. */\nexport enum KnownExtractiveSummarizationTaskParametersSortBy {\n  Offset = \"Offset\",\n  Rank = \"Rank\"\n}\n\n/**\n * Defines values for ExtractiveSummarizationTaskParametersSortBy. \\\n * {@link KnownExtractiveSummarizationTaskParametersSortBy} can be used interchangeably with ExtractiveSummarizationTaskParametersSortBy,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Offset** \\\n * **Rank**\n */\nexport type ExtractiveSummarizationTaskParametersSortBy = string;\n\n/** Known values of {@link ErrorCodeValue} that the service accepts. */\nexport enum KnownErrorCodeValue {\n  InvalidRequest = \"InvalidRequest\",\n  InvalidArgument = \"InvalidArgument\",\n  InternalServerError = \"InternalServerError\",\n  ServiceUnavailable = \"ServiceUnavailable\",\n  NotFound = \"NotFound\"\n}\n\n/**\n * Defines values for ErrorCodeValue. \\\n * {@link KnownErrorCodeValue} can be used interchangeably with ErrorCodeValue,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **InvalidRequest** \\\n * **InvalidArgument** \\\n * **InternalServerError** \\\n * **ServiceUnavailable** \\\n * **NotFound**\n */\nexport type ErrorCodeValue = string;\n\n/** Known values of {@link InnerErrorCodeValue} that the service accepts. */\nexport enum KnownInnerErrorCodeValue {\n  InvalidParameterValue = \"InvalidParameterValue\",\n  InvalidRequestBodyFormat = \"InvalidRequestBodyFormat\",\n  EmptyRequest = \"EmptyRequest\",\n  MissingInputRecords = \"MissingInputRecords\",\n  InvalidDocument = \"InvalidDocument\",\n  ModelVersionIncorrect = \"ModelVersionIncorrect\",\n  InvalidDocumentBatch = \"InvalidDocumentBatch\",\n  UnsupportedLanguageCode = \"UnsupportedLanguageCode\",\n  InvalidCountryHint = \"InvalidCountryHint\"\n}\n\n/**\n * Defines values for InnerErrorCodeValue. \\\n * {@link KnownInnerErrorCodeValue} can be used interchangeably with InnerErrorCodeValue,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **InvalidParameterValue** \\\n * **InvalidRequestBodyFormat** \\\n * **EmptyRequest** \\\n * **MissingInputRecords** \\\n * **InvalidDocument** \\\n * **ModelVersionIncorrect** \\\n * **InvalidDocumentBatch** \\\n * **UnsupportedLanguageCode** \\\n * **InvalidCountryHint**\n */\nexport type InnerErrorCodeValue = string;\n\n/** Known values of {@link WarningCode} that the service accepts. */\nexport enum KnownWarningCode {\n  LongWordsInDocument = \"LongWordsInDocument\",\n  DocumentTruncated = \"DocumentTruncated\"\n}\n\n/**\n * Defines values for WarningCode. \\\n * {@link KnownWarningCode} can be used interchangeably with WarningCode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **LongWordsInDocument** \\\n * **DocumentTruncated**\n */\nexport type WarningCode = string;\n\n/** Known values of {@link HealthcareEntityCategory} that the service accepts. */\nexport enum KnownHealthcareEntityCategory {\n  BodyStructure = \"BODY_STRUCTURE\",\n  AGE = \"AGE\",\n  Gender = \"GENDER\",\n  ExaminationName = \"EXAMINATION_NAME\",\n  Date = \"DATE\",\n  Direction = \"DIRECTION\",\n  Frequency = \"FREQUENCY\",\n  MeasurementValue = \"MEASUREMENT_VALUE\",\n  MeasurementUnit = \"MEASUREMENT_UNIT\",\n  RelationalOperator = \"RELATIONAL_OPERATOR\",\n  Time = \"TIME\",\n  GeneORProtein = \"GENE_OR_PROTEIN\",\n  Variant = \"VARIANT\",\n  AdministrativeEvent = \"ADMINISTRATIVE_EVENT\",\n  CareEnvironment = \"CARE_ENVIRONMENT\",\n  HealthcareProfession = \"HEALTHCARE_PROFESSION\",\n  Diagnosis = \"DIAGNOSIS\",\n  SymptomORSign = \"SYMPTOM_OR_SIGN\",\n  ConditionQualifier = \"CONDITION_QUALIFIER\",\n  MedicationClass = \"MEDICATION_CLASS\",\n  MedicationName = \"MEDICATION_NAME\",\n  Dosage = \"DOSAGE\",\n  MedicationForm = \"MEDICATION_FORM\",\n  MedicationRoute = \"MEDICATION_ROUTE\",\n  FamilyRelation = \"FAMILY_RELATION\",\n  TreatmentName = \"TREATMENT_NAME\"\n}\n\n/**\n * Defines values for HealthcareEntityCategory. \\\n * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **BODY_STRUCTURE** \\\n * **AGE** \\\n * **GENDER** \\\n * **EXAMINATION_NAME** \\\n * **DATE** \\\n * **DIRECTION** \\\n * **FREQUENCY** \\\n * **MEASUREMENT_VALUE** \\\n * **MEASUREMENT_UNIT** \\\n * **RELATIONAL_OPERATOR** \\\n * **TIME** \\\n * **GENE_OR_PROTEIN** \\\n * **VARIANT** \\\n * **ADMINISTRATIVE_EVENT** \\\n * **CARE_ENVIRONMENT** \\\n * **HEALTHCARE_PROFESSION** \\\n * **DIAGNOSIS** \\\n * **SYMPTOM_OR_SIGN** \\\n * **CONDITION_QUALIFIER** \\\n * **MEDICATION_CLASS** \\\n * **MEDICATION_NAME** \\\n * **DOSAGE** \\\n * **MEDICATION_FORM** \\\n * **MEDICATION_ROUTE** \\\n * **FAMILY_RELATION** \\\n * **TREATMENT_NAME**\n */\nexport type HealthcareEntityCategory = string;\n\n/** Known values of {@link RelationType} that the service accepts. */\nexport enum KnownRelationType {\n  Abbreviation = \"Abbreviation\",\n  DirectionOfBodyStructure = \"DirectionOfBodyStructure\",\n  DirectionOfCondition = \"DirectionOfCondition\",\n  DirectionOfExamination = \"DirectionOfExamination\",\n  DirectionOfTreatment = \"DirectionOfTreatment\",\n  DosageOfMedication = \"DosageOfMedication\",\n  FormOfMedication = \"FormOfMedication\",\n  FrequencyOfMedication = \"FrequencyOfMedication\",\n  FrequencyOfTreatment = \"FrequencyOfTreatment\",\n  QualifierOfCondition = \"QualifierOfCondition\",\n  RelationOfExamination = \"RelationOfExamination\",\n  RouteOfMedication = \"RouteOfMedication\",\n  TimeOfCondition = \"TimeOfCondition\",\n  TimeOfEvent = \"TimeOfEvent\",\n  TimeOfExamination = \"TimeOfExamination\",\n  TimeOfMedication = \"TimeOfMedication\",\n  TimeOfTreatment = \"TimeOfTreatment\",\n  UnitOfCondition = \"UnitOfCondition\",\n  UnitOfExamination = \"UnitOfExamination\",\n  ValueOfCondition = \"ValueOfCondition\",\n  ValueOfExamination = \"ValueOfExamination\"\n}\n\n/**\n * Defines values for RelationType. \\\n * {@link KnownRelationType} can be used interchangeably with RelationType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Abbreviation** \\\n * **DirectionOfBodyStructure** \\\n * **DirectionOfCondition** \\\n * **DirectionOfExamination** \\\n * **DirectionOfTreatment** \\\n * **DosageOfMedication** \\\n * **FormOfMedication** \\\n * **FrequencyOfMedication** \\\n * **FrequencyOfTreatment** \\\n * **QualifierOfCondition** \\\n * **RelationOfExamination** \\\n * **RouteOfMedication** \\\n * **TimeOfCondition** \\\n * **TimeOfEvent** \\\n * **TimeOfExamination** \\\n * **TimeOfMedication** \\\n * **TimeOfTreatment** \\\n * **UnitOfCondition** \\\n * **UnitOfExamination** \\\n * **ValueOfCondition** \\\n * **ValueOfExamination**\n */\nexport type RelationType = string;\n/** Defines values for State. */\nexport type State =\n  | \"notStarted\"\n  | \"running\"\n  | \"succeeded\"\n  | \"failed\"\n  | \"rejected\"\n  | \"cancelled\"\n  | \"cancelling\";\n/** Defines values for DocumentSentimentLabel. */\nexport type DocumentSentimentLabel =\n  | \"positive\"\n  | \"neutral\"\n  | \"negative\"\n  | \"mixed\";\n/** Defines values for SentenceSentimentLabel. */\nexport type SentenceSentimentLabel = \"positive\" | \"neutral\" | \"negative\";\n/** Defines values for TokenSentimentValue. */\nexport type TokenSentimentValue = \"positive\" | \"mixed\" | \"negative\";\n/** Defines values for TargetRelationType. */\nexport type TargetRelationType = \"assessment\" | \"target\";\n/** Defines values for Conditionality. */\nexport type Conditionality = \"hypothetical\" | \"conditional\";\n/** Defines values for Certainty. */\nexport type Certainty =\n  | \"positive\"\n  | \"positivePossible\"\n  | \"neutralPossible\"\n  | \"negativePossible\"\n  | \"negative\";\n/** Defines values for Association. */\nexport type Association = \"subject\" | \"other\";\n\n/** Optional parameters. */\nexport interface GeneratedClientAnalyzeOptionalParams\n  extends coreClient.OperationOptions {\n  /** Collection of documents to analyze and tasks to execute. */\n  body?: AnalyzeBatchInput;\n}\n\n/** Contains response data for the analyze operation. */\nexport type GeneratedClientAnalyzeResponse = GeneratedClientAnalyzeHeaders;\n\n/** Optional parameters. */\nexport interface GeneratedClientAnalyzeStatusOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) Set the maximum number of results per task. When both $top and $skip are specified, $skip is applied first. */\n  top?: number;\n  /** (Optional) Set the number of elements to offset in the response. When both $top and $skip are specified, $skip is applied first. */\n  skip?: number;\n}\n\n/** Contains response data for the analyzeStatus operation. */\nexport type GeneratedClientAnalyzeStatusResponse = AnalyzeJobState;\n\n/** Optional parameters. */\nexport interface GeneratedClientHealthStatusOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) Set the maximum number of results per task. When both $top and $skip are specified, $skip is applied first. */\n  top?: number;\n  /** (Optional) Set the number of elements to offset in the response. When both $top and $skip are specified, $skip is applied first. */\n  skip?: number;\n}\n\n/** Contains response data for the healthStatus operation. */\nexport type GeneratedClientHealthStatusResponse = HealthcareJobState;\n\n/** Optional parameters. */\nexport interface GeneratedClientCancelHealthJobOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the cancelHealthJob operation. */\nexport type GeneratedClientCancelHealthJobResponse = GeneratedClientCancelHealthJobHeaders;\n\n/** Optional parameters. */\nexport interface GeneratedClientHealthOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */\n  modelVersion?: string;\n  /** (Optional) Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets */\n  stringIndexType?: StringIndexType;\n  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */\n  loggingOptOut?: boolean;\n}\n\n/** Contains response data for the health operation. */\nexport type GeneratedClientHealthResponse = GeneratedClientHealthHeaders;\n\n/** Optional parameters. */\nexport interface GeneratedClientEntitiesRecognitionGeneralOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */\n  modelVersion?: string;\n  /** (Optional) Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets */\n  stringIndexType?: StringIndexType;\n  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */\n  loggingOptOut?: boolean;\n}\n\n/** Contains response data for the entitiesRecognitionGeneral operation. */\nexport type GeneratedClientEntitiesRecognitionGeneralResponse = EntitiesResult;\n\n/** Optional parameters. */\nexport interface GeneratedClientEntitiesRecognitionPiiOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */\n  modelVersion?: string;\n  /** (Optional) Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets */\n  stringIndexType?: StringIndexType;\n  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */\n  loggingOptOut?: boolean;\n  /** (Optional) if specified, will set the PII domain to include only a subset of the entity categories. Possible values include: 'PHI', 'none'. */\n  domain?: string;\n  /** (Optional) describes the PII categories to return */\n  piiCategories?: PiiCategory[];\n}\n\n/** Contains response data for the entitiesRecognitionPii operation. */\nexport type GeneratedClientEntitiesRecognitionPiiResponse = PiiResult;\n\n/** Optional parameters. */\nexport interface GeneratedClientEntitiesLinkingOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */\n  modelVersion?: string;\n  /** (Optional) Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets */\n  stringIndexType?: StringIndexType;\n  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */\n  loggingOptOut?: boolean;\n}\n\n/** Contains response data for the entitiesLinking operation. */\nexport type GeneratedClientEntitiesLinkingResponse = EntityLinkingResult;\n\n/** Optional parameters. */\nexport interface GeneratedClientKeyPhrasesOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */\n  modelVersion?: string;\n  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */\n  loggingOptOut?: boolean;\n}\n\n/** Contains response data for the keyPhrases operation. */\nexport type GeneratedClientKeyPhrasesResponse = KeyPhraseResult;\n\n/** Optional parameters. */\nexport interface GeneratedClientLanguagesOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */\n  modelVersion?: string;\n  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */\n  loggingOptOut?: boolean;\n}\n\n/** Contains response data for the languages operation. */\nexport type GeneratedClientLanguagesResponse = LanguageResult;\n\n/** Optional parameters. */\nexport interface GeneratedClientSentimentOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. */\n  modelVersion?: string;\n  /** (Optional) Specifies the method used to interpret string offsets.  Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see https://aka.ms/text-analytics-offsets */\n  stringIndexType?: StringIndexType;\n  /** (Optional) If set to true, you opt-out of having your text input logged for troubleshooting. By default, Text Analytics logs your input text for 48 hours, solely to allow for troubleshooting issues in providing you with the Text Analytics natural language processing functions. Setting this parameter to true, disables input logging and may limit our ability to remediate issues that occur.  Please see Cognitive Services Compliance and Privacy notes at https://aka.ms/cs-compliance for additional details, and Microsoft Responsible AI principles at https://www.microsoft.com/en-us/ai/responsible-ai. */\n  loggingOptOut?: boolean;\n  /** (Optional) if set to true, response will contain not only sentiment prediction but also opinion mining (aspect-based sentiment analysis) results. */\n  opinionMining?: boolean;\n}\n\n/** Contains response data for the sentiment operation. */\nexport type GeneratedClientSentimentResponse = SentimentResponse;\n\n/** Optional parameters. */\nexport interface GeneratedClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Text Analytics API version (for example, v3.0). */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"],"names":["AnalyzeBatchInputMapper","MultiLanguageBatchInputMapper","LanguageBatchInputMapper","coreClient.ServiceClient","coreClient.createSerializer","Mappers.GeneratedClientAnalyzeHeaders","Mappers.ErrorResponse","Parameters.body","Parameters.endpoint","Parameters.apiVersion","Parameters.contentType","Parameters.accept","Mappers.AnalyzeJobState","Parameters.includeStatistics","Parameters.top","Parameters.skip","Parameters.jobId","Mappers.HealthcareJobState","Parameters.jobId1","Mappers.GeneratedClientCancelHealthJobHeaders","Mappers.GeneratedClientHealthHeaders","Parameters.input","Parameters.modelVersion","Parameters.stringIndexType","Parameters.loggingOptOut","Mappers.EntitiesResult","Mappers.PiiResult","Parameters.domain","Parameters.piiCategories","Mappers.EntityLinkingResult","Mappers.KeyPhraseResult","Mappers.LanguageResult","Parameters.input1","Mappers.SentimentResponse","Parameters.opinionMining","createClientLogger","createSpanFunction","RestError","SpanStatusCode","serializer","createSerializer","healthStatusOperationSpec","getPagedAsyncIterator","analyzeStatusOperationSpec","PiiEntityDomain","isTokenCredential","bearerTokenAuthenticationPolicy","LroEngine","KnownInnerErrorCodeValue","KnownWarningCode","KnownHealthcareEntityCategory"],"mappings":"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"}