{"version":3,"file":"analyzeLro.js","sourceRoot":"","sources":["../../src/analyzeLro.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResponse, PollerLike, RawResponse } from \"@azure/core-lro\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { createSerializer, OperationOptions, OperationSpec } from \"@azure/core-client\";\nimport {\n  GeneratedClient,\n  GeneratedClientAnalyzeStatusOptionalParams,\n  GeneratedClientAnalyzeStatusResponse,\n  JobManifestTasks,\n  TextDocumentInput\n} from \"./generated\";\nimport { createSpan } from \"./tracing\";\nimport { compileError, getRawResponse, sendGetRequest } from \"./util\";\nimport * as Mappers from \"./generated/models/mappers\";\nimport {\n  accept,\n  apiVersion,\n  endpoint,\n  includeStatistics,\n  skip,\n  top\n} from \"./generated/models/parameters\";\nimport { getPagedAsyncIterator, PagedResult } from \"@azure/core-paging\";\nimport { AnalysisPollOperationState, OperationMetadata } from \"./pollerModels\";\nimport {\n  AnalyzeActionsResult,\n  createAnalyzeActionsResult,\n  PagedAnalyzeActionsResult\n} from \"./analyzeActionsResult\";\n\n/**\n * Options for the begin analyze actions operation.\n */\nexport interface BeginAnalyzeActionsOptions extends OperationOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * Result type of the Begin Analyze Actions Long-Running-Operation (LRO).\n */\nexport type AnalyzeActionsPollerLike = PollerLike<\n  AnalyzeActionsOperationState,\n  PagedAnalyzeActionsResult\n>;\n\n/**\n * The metadata for beginAnalyzeActions operations.\n */\nexport interface AnalyzeActionsOperationMetadata extends OperationMetadata {\n  /**\n   * Number of successfully completed actions.\n   */\n  actionsSucceededCount: number;\n  /**\n   * Number of failed actions.\n   */\n  actionsFailedCount: number;\n  /**\n   * Number of actions still in progress.\n   */\n  actionsInProgressCount: number;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * The state of the begin analyze polling operation.\n */\nexport interface AnalyzeActionsOperationState\n  extends AnalysisPollOperationState<PagedAnalyzeActionsResult>,\n    AnalyzeActionsOperationMetadata {}\n\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\n// Consider whether the spec can be exported by code gen\nconst analyzeStatusOperationSpec: OperationSpec = {\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeJobState\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [includeStatistics, top, skip],\n  urlParameters: [endpoint, apiVersion],\n  headerParameters: [accept],\n  serializer\n};\n\n/**\n * @internal\n */\nexport class AnalyzeLro implements LongRunningOperation<PagedAnalyzeActionsResult> {\n  public requestMethod = \"POST\";\n  public requestPath = \"/analyze\";\n  constructor(\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: GeneratedClient,\n    private baseOptions: OperationOptions,\n    private initOptions: {\n      displayName?: string;\n    },\n    private pollOptions: {\n      includeStatistics?: boolean;\n    },\n    private documents: TextDocumentInput[],\n    private tasks: JobManifestTasks\n  ) {}\n  async sendInitialRequest(): Promise<LroResponse<PagedAnalyzeActionsResult>> {\n    const { span, updatedOptions: finalOptions } = createSpan(\"TextAnalyticsClient-beginAnalyze\", {\n      ...this.baseOptions,\n      ...this.initOptions\n    });\n    try {\n      const { flatResponse, rawResponse } = await getRawResponse(\n        (paramOptions) =>\n          this.client.analyze({\n            body: {\n              analysisInput: { documents: this.documents },\n              tasks: this.tasks,\n              displayName: this.initOptions.displayName\n            },\n            ...paramOptions\n          }),\n        finalOptions\n      );\n      return {\n        flatResponse: flatResponse as PagedAnalyzeActionsResult,\n        rawResponse\n      };\n    } catch (e) {\n      const exception = compileError(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n  async sendPollRequest(path: string): Promise<LroResponse<PagedAnalyzeActionsResult>> {\n    return sendGetRequest(\n      this.client,\n      analyzeStatusOperationSpec,\n      \"AnalyzeStatus\",\n      { ...this.baseOptions, ...this.pollOptions },\n      path\n    ) as Promise<LroResponse<PagedAnalyzeActionsResult>>;\n  }\n}\n\n/**\n * @internal\n */\nexport function isAnalyzeDone(response: unknown): boolean {\n  const castResponse = response as GeneratedClientAnalyzeStatusResponse;\n  switch (castResponse.status) {\n    case \"notStarted\":\n    case \"running\":\n      return false;\n    default: {\n      return true;\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function processAnalyzeResult(\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  client: GeneratedClient,\n  documents: TextDocumentInput[],\n  options: GeneratedClientAnalyzeStatusOptionalParams\n): (result: unknown, state: AnalyzeActionsOperationState) => PagedAnalyzeActionsResult {\n  return (_result: unknown, state: AnalyzeActionsOperationState): PagedAnalyzeActionsResult => {\n    const pollingURL = (state as any).pollingURL;\n    const pagedResult: PagedResult<AnalyzeActionsResult> = {\n      firstPageLink: pollingURL,\n      getPage: async (pageLink: string, maxPageSize?: number) => {\n        const response = await sendGetRequest(\n          client,\n          analyzeStatusOperationSpec,\n          \"AnalyzeStatus\",\n          // if `top` is set to `undefined`, the default value will not be sent\n          // as part of the request.\n          maxPageSize ? { ...options, top: maxPageSize } : options,\n          pageLink\n        );\n        const flatResponse = response.flatResponse as GeneratedClientAnalyzeStatusResponse;\n        return {\n          page: createAnalyzeActionsResult(flatResponse, documents),\n          nextPageLink: flatResponse.nextLink\n        };\n      }\n    };\n    const pagedIterator = getPagedAsyncIterator<AnalyzeActionsResult, AnalyzeActionsResult>(\n      pagedResult\n    );\n    // Attach stats if the service starts to return them\n    // https://github.com/Azure/azure-sdk-for-js/issues/14139\n    // state.result = Object.assign(pagedIterator, {\n    //   statistics: operationStatus.statistics\n    // });\n    return pagedIterator;\n  };\n}\n\n/**\n * @internal\n */\nexport function updateAnalyzeState(\n  state: AnalyzeActionsOperationState,\n  lastResponse: RawResponse\n): void {\n  const response = lastResponse.body as GeneratedClientAnalyzeStatusResponse;\n  state.createdOn = response.createdDateTime;\n  state.lastModifiedOn = response.lastUpdateDateTime;\n  state.expiresOn = response.expirationDateTime;\n  state.status = response.status;\n  state.actionsSucceededCount = response.tasks.completed;\n  state.actionsFailedCount = response.tasks.failed;\n  state.actionsInProgressCount = response.tasks.inProgress;\n  state.displayName = response.displayName;\n}\n"]}