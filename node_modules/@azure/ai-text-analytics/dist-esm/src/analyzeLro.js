// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { SpanStatusCode } from "@azure/core-tracing";
import { createSerializer } from "@azure/core-client";
import { createSpan } from "./tracing";
import { compileError, getRawResponse, sendGetRequest } from "./util";
import * as Mappers from "./generated/models/mappers";
import { accept, apiVersion, endpoint, includeStatistics, skip, top } from "./generated/models/parameters";
import { getPagedAsyncIterator } from "@azure/core-paging";
import { createAnalyzeActionsResult } from "./analyzeActionsResult";
const serializer = createSerializer(Mappers, /* isXml */ false);
// Consider whether the spec can be exported by code gen
const analyzeStatusOperationSpec = {
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalyzeJobState
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [includeStatistics, top, skip],
    urlParameters: [endpoint, apiVersion],
    headerParameters: [accept],
    serializer
};
/**
 * @internal
 */
export class AnalyzeLro {
    constructor(
    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
    client, baseOptions, initOptions, pollOptions, documents, tasks) {
        this.client = client;
        this.baseOptions = baseOptions;
        this.initOptions = initOptions;
        this.pollOptions = pollOptions;
        this.documents = documents;
        this.tasks = tasks;
        this.requestMethod = "POST";
        this.requestPath = "/analyze";
    }
    async sendInitialRequest() {
        const { span, updatedOptions: finalOptions } = createSpan("TextAnalyticsClient-beginAnalyze", Object.assign(Object.assign({}, this.baseOptions), this.initOptions));
        try {
            const { flatResponse, rawResponse } = await getRawResponse((paramOptions) => this.client.analyze(Object.assign({ body: {
                    analysisInput: { documents: this.documents },
                    tasks: this.tasks,
                    displayName: this.initOptions.displayName
                } }, paramOptions)), finalOptions);
            return {
                flatResponse: flatResponse,
                rawResponse
            };
        }
        catch (e) {
            const exception = compileError(e);
            span.setStatus({
                code: SpanStatusCode.ERROR,
                message: exception.message
            });
            throw exception;
        }
        finally {
            span.end();
        }
    }
    async sendPollRequest(path) {
        return sendGetRequest(this.client, analyzeStatusOperationSpec, "AnalyzeStatus", Object.assign(Object.assign({}, this.baseOptions), this.pollOptions), path);
    }
}
/**
 * @internal
 */
export function isAnalyzeDone(response) {
    const castResponse = response;
    switch (castResponse.status) {
        case "notStarted":
        case "running":
            return false;
        default: {
            return true;
        }
    }
}
/**
 * @internal
 */
export function processAnalyzeResult(
// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
client, documents, options) {
    return (_result, state) => {
        const pollingURL = state.pollingURL;
        const pagedResult = {
            firstPageLink: pollingURL,
            getPage: async (pageLink, maxPageSize) => {
                const response = await sendGetRequest(client, analyzeStatusOperationSpec, "AnalyzeStatus", 
                // if `top` is set to `undefined`, the default value will not be sent
                // as part of the request.
                maxPageSize ? Object.assign(Object.assign({}, options), { top: maxPageSize }) : options, pageLink);
                const flatResponse = response.flatResponse;
                return {
                    page: createAnalyzeActionsResult(flatResponse, documents),
                    nextPageLink: flatResponse.nextLink
                };
            }
        };
        const pagedIterator = getPagedAsyncIterator(pagedResult);
        // Attach stats if the service starts to return them
        // https://github.com/Azure/azure-sdk-for-js/issues/14139
        // state.result = Object.assign(pagedIterator, {
        //   statistics: operationStatus.statistics
        // });
        return pagedIterator;
    };
}
/**
 * @internal
 */
export function updateAnalyzeState(state, lastResponse) {
    const response = lastResponse.body;
    state.createdOn = response.createdDateTime;
    state.lastModifiedOn = response.lastUpdateDateTime;
    state.expiresOn = response.expirationDateTime;
    state.status = response.status;
    state.actionsSucceededCount = response.tasks.completed;
    state.actionsFailedCount = response.tasks.failed;
    state.actionsInProgressCount = response.tasks.inProgress;
    state.displayName = response.displayName;
}
//# sourceMappingURL=analyzeLro.js.map