{"version":3,"file":"healthLro.js","sourceRoot":"","sources":["../../src/healthLro.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { LongRunningOperation, LroResponse, PollerLike, RawResponse } from \"@azure/core-lro\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { createSerializer, OperationOptions, OperationSpec } from \"@azure/core-client\";\nimport {\n  AnalyzeHealthcareEntitiesResult,\n  AnalyzeHealthcareEntitiesResultArray,\n  makeHealthcareEntitiesErrorResult,\n  makeHealthcareEntitiesResult,\n  PagedAnalyzeHealthcareEntitiesResult\n} from \"./analyzeHealthcareEntitiesResult\";\nimport {\n  GeneratedClient,\n  GeneratedClientHealthStatusOptionalParams,\n  GeneratedClientHealthStatusResponse,\n  TextDocumentInput\n} from \"./generated\";\nimport { createSpan } from \"./tracing\";\nimport {\n  addStrEncodingParam,\n  getRawResponse,\n  compileError,\n  sendGetRequest,\n  StringIndexType\n} from \"./util\";\nimport * as Mappers from \"./generated/models/mappers\";\nimport {\n  accept,\n  apiVersion,\n  endpoint,\n  includeStatistics,\n  skip,\n  top\n} from \"./generated/models/parameters\";\nimport { processAndCombineSuccessfulAndErroneousDocuments } from \"./textAnalyticsResult\";\nimport { getPagedAsyncIterator, PagedResult } from \"@azure/core-paging\";\nimport { AnalysisPollOperationState } from \"./pollerModels\";\nimport { TextAnalyticsOperationOptions } from \"./textAnalyticsOperationOptions\";\n\n/**\n * Options for the begin analyze healthcare entities operation.\n */\nexport interface BeginAnalyzeHealthcareEntitiesOptions extends TextAnalyticsOperationOptions {\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  stringIndexType?: StringIndexType;\n  /**\n   * Delay to wait until next poll, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Result type of the Health Long-Running-Operation (LRO)\n */\nexport type AnalyzeHealthcareEntitiesPollerLike = PollerLike<\n  AnalyzeHealthcareOperationState,\n  PagedAnalyzeHealthcareEntitiesResult\n>;\n\n/**\n * The state of the begin analyze healthcare polling operation.\n */\nexport interface AnalyzeHealthcareOperationState\n  extends AnalysisPollOperationState<PagedAnalyzeHealthcareEntitiesResult> {}\n\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\n// Consider whether the spec can be exported by code gen\nconst healthStatusOperationSpec: OperationSpec = {\n  path: \"/entities/health/jobs/{jobId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HealthcareJobState\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [includeStatistics, top, skip],\n  urlParameters: [endpoint, apiVersion],\n  headerParameters: [accept],\n  serializer\n};\n\n/**\n * @internal\n */\nexport class HealthLro implements LongRunningOperation<PagedAnalyzeHealthcareEntitiesResult> {\n  public requestMethod = \"POST\";\n  public requestPath = \"/entities/health/jobs\";\n  constructor(\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    private client: GeneratedClient,\n    private baseOptions: OperationOptions,\n    private initOptions: {\n      modelVersion?: string;\n      stringIndexType?: StringIndexType;\n      loggingOptOut?: boolean;\n    },\n    private pollOptions: {\n      includeStatistics?: boolean;\n    },\n    private documents: TextDocumentInput[]\n  ) {}\n  async sendInitialRequest(): Promise<LroResponse<PagedAnalyzeHealthcareEntitiesResult>> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-beginAnalyzeHealthcare\",\n      {\n        ...this.baseOptions,\n        ...addStrEncodingParam(this.initOptions)\n      }\n    );\n    try {\n      const { flatResponse, rawResponse } = await getRawResponse(\n        (paramOptions) => this.client.health({ documents: this.documents }, paramOptions),\n        finalOptions\n      );\n      return {\n        flatResponse: flatResponse as PagedAnalyzeHealthcareEntitiesResult,\n        rawResponse\n      };\n    } catch (e) {\n      const exception = compileError(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: exception.message\n      });\n      throw exception;\n    } finally {\n      span.end();\n    }\n  }\n  async sendPollRequest(path: string): Promise<LroResponse<PagedAnalyzeHealthcareEntitiesResult>> {\n    return sendGetRequest(\n      this.client,\n      healthStatusOperationSpec,\n      \"HealthStatus\",\n      { ...this.baseOptions, ...this.pollOptions },\n      path\n    ) as Promise<LroResponse<PagedAnalyzeHealthcareEntitiesResult>>;\n  }\n}\n\n/**\n * @internal\n */\nexport function isHealthDone(response: unknown): boolean {\n  const castResponse = response as GeneratedClientHealthStatusResponse;\n  switch (castResponse.status) {\n    case \"notStarted\":\n    case \"running\":\n      return false;\n    case \"failed\": {\n      const errors = castResponse.errors\n        ?.map((e) => ` code ${e.code}, message: '${e.message}'`)\n        .join(\"\\n\");\n      const message = `Healthcare analysis failed. Error(s): ${errors || \"\"}`;\n      throw new Error(message);\n    }\n    default: {\n      if (castResponse.results) {\n        return true;\n      } else {\n        throw new Error(\"Healthcare action has finished but the there are no results!\");\n      }\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function processHealthResult(\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  client: GeneratedClient,\n  documents: TextDocumentInput[],\n  options: GeneratedClientHealthStatusOptionalParams\n): (\n  result: unknown,\n  state: AnalyzeHealthcareOperationState\n) => PagedAnalyzeHealthcareEntitiesResult {\n  return (\n    result: unknown,\n    state: AnalyzeHealthcareOperationState\n  ): PagedAnalyzeHealthcareEntitiesResult => {\n    const pollingURL = (state as any).pollingURL;\n    const pagedResult: PagedResult<AnalyzeHealthcareEntitiesResultArray> = {\n      firstPageLink: pollingURL,\n      getPage: async (pageLink: string, maxPageSize?: number) => {\n        const response = await sendGetRequest(\n          client,\n          healthStatusOperationSpec,\n          \"HealthStatus\",\n          // if `top` is set to `undefined`, the default value will not be sent\n          // as part of the request.\n          maxPageSize ? { ...options, top: maxPageSize } : options,\n          pageLink\n        );\n        const flatResponse = response.flatResponse as GeneratedClientHealthStatusResponse;\n        if (flatResponse.results) {\n          return {\n            page: processAndCombineSuccessfulAndErroneousDocuments(\n              documents,\n              flatResponse.results,\n              makeHealthcareEntitiesResult,\n              makeHealthcareEntitiesErrorResult\n            ),\n            nextPageLink: flatResponse.nextLink\n          };\n        } else {\n          throw new Error(\"Healthcare action has succeeded but there are no results!\");\n        }\n      }\n    };\n    const pagedIterator = getPagedAsyncIterator<\n      AnalyzeHealthcareEntitiesResult,\n      AnalyzeHealthcareEntitiesResultArray\n    >(pagedResult);\n    return Object.assign(pagedIterator, {\n      statistics: (result as any).results.statistics,\n      modelVersion: (result as any).results.modelVersion!\n    });\n  };\n}\n\n/**\n * @internal\n */\nexport function updateHealthState(\n  state: AnalyzeHealthcareOperationState,\n  lastResponse: RawResponse\n): void {\n  const response = lastResponse.body as any;\n  state.createdOn = response.createdDateTime;\n  state.lastModifiedOn = response.lastUpdateDateTime;\n  state.expiresOn = response.expirationDateTime;\n  state.status = response.status;\n}\n"]}